// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: chain.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Limit int32

const (
	Limit_UNKNOWN   Limit = 0
	Limit_SIGNATURE Limit = 100
)

// Enum value maps for Limit.
var (
	Limit_name = map[int32]string{
		0:   "UNKNOWN",
		100: "SIGNATURE",
	}
	Limit_value = map[string]int32{
		"UNKNOWN":   0,
		"SIGNATURE": 100,
	}
)

func (x Limit) Enum() *Limit {
	p := new(Limit)
	*p = x
	return p
}

func (x Limit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Limit) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[0].Descriptor()
}

func (Limit) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[0]
}

func (x Limit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Limit.Descriptor instead.
func (Limit) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{0}
}

type ControlledArea_TRUST_FLAG int32

const (
	ControlledArea_UNCERT    ControlledArea_TRUST_FLAG = 0
	ControlledArea_TRUSTED   ControlledArea_TRUST_FLAG = 1
	ControlledArea_UNTRUSTED ControlledArea_TRUST_FLAG = 2
)

// Enum value maps for ControlledArea_TRUST_FLAG.
var (
	ControlledArea_TRUST_FLAG_name = map[int32]string{
		0: "UNCERT",
		1: "TRUSTED",
		2: "UNTRUSTED",
	}
	ControlledArea_TRUST_FLAG_value = map[string]int32{
		"UNCERT":    0,
		"TRUSTED":   1,
		"UNTRUSTED": 2,
	}
)

func (x ControlledArea_TRUST_FLAG) Enum() *ControlledArea_TRUST_FLAG {
	p := new(ControlledArea_TRUST_FLAG)
	*p = x
	return p
}

func (x ControlledArea_TRUST_FLAG) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlledArea_TRUST_FLAG) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[1].Descriptor()
}

func (ControlledArea_TRUST_FLAG) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[1]
}

func (x ControlledArea_TRUST_FLAG) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlledArea_TRUST_FLAG.Descriptor instead.
func (ControlledArea_TRUST_FLAG) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{1, 0}
}

type ControlledArea_STATUS_FALG int32

const (
	ControlledArea_ENABLED  ControlledArea_STATUS_FALG = 0
	ControlledArea_DISABLED ControlledArea_STATUS_FALG = 1
)

// Enum value maps for ControlledArea_STATUS_FALG.
var (
	ControlledArea_STATUS_FALG_name = map[int32]string{
		0: "ENABLED",
		1: "DISABLED",
	}
	ControlledArea_STATUS_FALG_value = map[string]int32{
		"ENABLED":  0,
		"DISABLED": 1,
	}
)

func (x ControlledArea_STATUS_FALG) Enum() *ControlledArea_STATUS_FALG {
	p := new(ControlledArea_STATUS_FALG)
	*p = x
	return p
}

func (x ControlledArea_STATUS_FALG) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlledArea_STATUS_FALG) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[2].Descriptor()
}

func (ControlledArea_STATUS_FALG) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[2]
}

func (x ControlledArea_STATUS_FALG) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlledArea_STATUS_FALG.Descriptor instead.
func (ControlledArea_STATUS_FALG) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{1, 1}
}

type Operation_Type int32

const (
	Operation_UNKNOWN                 Operation_Type = 0
	Operation_CREATE_ACCOUNT          Operation_Type = 1
	Operation_SET_METADATA            Operation_Type = 4
	Operation_SET_SIGNER_WEIGHT       Operation_Type = 5
	Operation_SET_THRESHOLD           Operation_Type = 6
	Operation_PAY_COIN                Operation_Type = 7
	Operation_LOG                     Operation_Type = 8
	Operation_SET_PRIVILEGE           Operation_Type = 9
	Operation_UPGRADE_CONTRACT        Operation_Type = 10
	Operation_SET_CONTROLLED_AREA     Operation_Type = 11
	Operation_CREATE_PRIVATE_CONTRACT Operation_Type = 12
	Operation_CALL_PRIVATE_CONTRACT   Operation_Type = 13
)

// Enum value maps for Operation_Type.
var (
	Operation_Type_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "CREATE_ACCOUNT",
		4:  "SET_METADATA",
		5:  "SET_SIGNER_WEIGHT",
		6:  "SET_THRESHOLD",
		7:  "PAY_COIN",
		8:  "LOG",
		9:  "SET_PRIVILEGE",
		10: "UPGRADE_CONTRACT",
		11: "SET_CONTROLLED_AREA",
		12: "CREATE_PRIVATE_CONTRACT",
		13: "CALL_PRIVATE_CONTRACT",
	}
	Operation_Type_value = map[string]int32{
		"UNKNOWN":                 0,
		"CREATE_ACCOUNT":          1,
		"SET_METADATA":            4,
		"SET_SIGNER_WEIGHT":       5,
		"SET_THRESHOLD":           6,
		"PAY_COIN":                7,
		"LOG":                     8,
		"SET_PRIVILEGE":           9,
		"UPGRADE_CONTRACT":        10,
		"SET_CONTROLLED_AREA":     11,
		"CREATE_PRIVATE_CONTRACT": 12,
		"CALL_PRIVATE_CONTRACT":   13,
	}
)

func (x Operation_Type) Enum() *Operation_Type {
	p := new(Operation_Type)
	*p = x
	return p
}

func (x Operation_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[3].Descriptor()
}

func (Operation_Type) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[3]
}

func (x Operation_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation_Type.Descriptor instead.
func (Operation_Type) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{11, 0}
}

type Transaction_Limit int32

const (
	Transaction_UNKNOWN    Transaction_Limit = 0
	Transaction_OPERATIONS Transaction_Limit = 1000
)

// Enum value maps for Transaction_Limit.
var (
	Transaction_Limit_name = map[int32]string{
		0:    "UNKNOWN",
		1000: "OPERATIONS",
	}
	Transaction_Limit_value = map[string]int32{
		"UNKNOWN":    0,
		"OPERATIONS": 1000,
	}
)

func (x Transaction_Limit) Enum() *Transaction_Limit {
	p := new(Transaction_Limit)
	*p = x
	return p
}

func (x Transaction_Limit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Transaction_Limit) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[4].Descriptor()
}

func (Transaction_Limit) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[4]
}

func (x Transaction_Limit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Transaction_Limit.Descriptor instead.
func (Transaction_Limit) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{13, 0}
}

type Signer_Limit int32

const (
	Signer_SIGNER_NONE Signer_Limit = 0
	Signer_SIGNER      Signer_Limit = 100
)

// Enum value maps for Signer_Limit.
var (
	Signer_Limit_name = map[int32]string{
		0:   "SIGNER_NONE",
		100: "SIGNER",
	}
	Signer_Limit_value = map[string]int32{
		"SIGNER_NONE": 0,
		"SIGNER":      100,
	}
)

func (x Signer_Limit) Enum() *Signer_Limit {
	p := new(Signer_Limit)
	*p = x
	return p
}

func (x Signer_Limit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Signer_Limit) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[5].Descriptor()
}

func (Signer_Limit) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[5]
}

func (x Signer_Limit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Signer_Limit.Descriptor instead.
func (Signer_Limit) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{14, 0}
}

type Trigger_TransactionType int32

const (
	Trigger_NORMAL_TRANSACTION   Trigger_TransactionType = 0
	Trigger_CONTRACT_TRANSACTION Trigger_TransactionType = 1
)

// Enum value maps for Trigger_TransactionType.
var (
	Trigger_TransactionType_name = map[int32]string{
		0: "NORMAL_TRANSACTION",
		1: "CONTRACT_TRANSACTION",
	}
	Trigger_TransactionType_value = map[string]int32{
		"NORMAL_TRANSACTION":   0,
		"CONTRACT_TRANSACTION": 1,
	}
)

func (x Trigger_TransactionType) Enum() *Trigger_TransactionType {
	p := new(Trigger_TransactionType)
	*p = x
	return p
}

func (x Trigger_TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trigger_TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[6].Descriptor()
}

func (Trigger_TransactionType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[6]
}

func (x Trigger_TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trigger_TransactionType.Descriptor instead.
func (Trigger_TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{15, 0}
}

type Contract_ContractType int32

const (
	Contract_JAVASCRIPT Contract_ContractType = 0
	Contract_EVM        Contract_ContractType = 1
	Contract_SYSTEM     Contract_ContractType = 2
)

// Enum value maps for Contract_ContractType.
var (
	Contract_ContractType_name = map[int32]string{
		0: "JAVASCRIPT",
		1: "EVM",
		2: "SYSTEM",
	}
	Contract_ContractType_value = map[string]int32{
		"JAVASCRIPT": 0,
		"EVM":        1,
		"SYSTEM":     2,
	}
)

func (x Contract_ContractType) Enum() *Contract_ContractType {
	p := new(Contract_ContractType)
	*p = x
	return p
}

func (x Contract_ContractType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Contract_ContractType) Descriptor() protoreflect.EnumDescriptor {
	return file_chain_proto_enumTypes[7].Descriptor()
}

func (Contract_ContractType) Type() protoreflect.EnumType {
	return &file_chain_proto_enumTypes[7]
}

func (x Contract_ContractType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Contract_ContractType.Descriptor instead.
func (Contract_ContractType) EnumDescriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{21, 0}
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address        string            `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Nonce          int64             `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"` //Last transaction seq
	Priv           *AccountPrivilege `protobuf:"bytes,3,opt,name=priv,proto3" json:"priv,omitempty"`
	MetadatasHash  []byte            `protobuf:"bytes,4,opt,name=metadatas_hash,json=metadatasHash,proto3" json:"metadatas_hash,omitempty"` //metadatas_hash = merklehash(metadatas);
	AssetsHash     []byte            `protobuf:"bytes,5,opt,name=assets_hash,json=assetsHash,proto3" json:"assets_hash,omitempty"`          //assets_hash = merkelhash(assets)
	Contract       *Contract         `protobuf:"bytes,6,opt,name=contract,proto3" json:"contract,omitempty"`
	Balance        int64             `protobuf:"varint,7,opt,name=balance,proto3" json:"balance,omitempty"`
	ControlledArea *ControlledArea   `protobuf:"bytes,8,opt,name=controlled_area,json=controlledArea,proto3" json:"controlled_area,omitempty"`
	PublicKey      string            `protobuf:"bytes,9,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{0}
}

func (x *Account) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Account) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *Account) GetPriv() *AccountPrivilege {
	if x != nil {
		return x.Priv
	}
	return nil
}

func (x *Account) GetMetadatasHash() []byte {
	if x != nil {
		return x.MetadatasHash
	}
	return nil
}

func (x *Account) GetAssetsHash() []byte {
	if x != nil {
		return x.AssetsHash
	}
	return nil
}

func (x *Account) GetContract() *Contract {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *Account) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Account) GetControlledArea() *ControlledArea {
	if x != nil {
		return x.ControlledArea
	}
	return nil
}

func (x *Account) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

type ControlledArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trusted    ControlledArea_TRUST_FLAG  `protobuf:"varint,1,opt,name=trusted,proto3,enum=protocol.ControlledArea_TRUST_FLAG" json:"trusted,omitempty"`
	Status     ControlledArea_STATUS_FALG `protobuf:"varint,2,opt,name=status,proto3,enum=protocol.ControlledArea_STATUS_FALG" json:"status,omitempty"`
	Attributes []*KeyPair                 `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *ControlledArea) Reset() {
	*x = ControlledArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlledArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlledArea) ProtoMessage() {}

func (x *ControlledArea) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlledArea.ProtoReflect.Descriptor instead.
func (*ControlledArea) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{1}
}

func (x *ControlledArea) GetTrusted() ControlledArea_TRUST_FLAG {
	if x != nil {
		return x.Trusted
	}
	return ControlledArea_UNCERT
}

func (x *ControlledArea) GetStatus() ControlledArea_STATUS_FALG {
	if x != nil {
		return x.Status
	}
	return ControlledArea_ENABLED
}

func (x *ControlledArea) GetAttributes() []*KeyPair {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type LedgerHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seq                int64  `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Hash               []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	PreviousHash       []byte `protobuf:"bytes,3,opt,name=previous_hash,json=previousHash,proto3" json:"previous_hash,omitempty"`
	AccountTreeHash    []byte `protobuf:"bytes,4,opt,name=account_tree_hash,json=accountTreeHash,proto3" json:"account_tree_hash,omitempty"`
	CloseTime          int64  `protobuf:"varint,5,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`
	ConsensusValueHash []byte `protobuf:"bytes,6,opt,name=consensus_value_hash,json=consensusValueHash,proto3" json:"consensus_value_hash,omitempty"`
	Version            int64  `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
	TxCount            int64  `protobuf:"varint,8,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	ValidatorsHash     []byte `protobuf:"bytes,9,opt,name=validators_hash,json=validatorsHash,proto3" json:"validators_hash,omitempty"` // hash
	Reserve            string `protobuf:"bytes,10,opt,name=reserve,proto3" json:"reserve,omitempty"`
	FeesHash           []byte `protobuf:"bytes,11,opt,name=fees_hash,json=feesHash,proto3" json:"fees_hash,omitempty"`
	ChainId            int64  `protobuf:"varint,12,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *LedgerHeader) Reset() {
	*x = LedgerHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedgerHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerHeader) ProtoMessage() {}

func (x *LedgerHeader) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerHeader.ProtoReflect.Descriptor instead.
func (*LedgerHeader) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{2}
}

func (x *LedgerHeader) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *LedgerHeader) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *LedgerHeader) GetPreviousHash() []byte {
	if x != nil {
		return x.PreviousHash
	}
	return nil
}

func (x *LedgerHeader) GetAccountTreeHash() []byte {
	if x != nil {
		return x.AccountTreeHash
	}
	return nil
}

func (x *LedgerHeader) GetCloseTime() int64 {
	if x != nil {
		return x.CloseTime
	}
	return 0
}

func (x *LedgerHeader) GetConsensusValueHash() []byte {
	if x != nil {
		return x.ConsensusValueHash
	}
	return nil
}

func (x *LedgerHeader) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *LedgerHeader) GetTxCount() int64 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *LedgerHeader) GetValidatorsHash() []byte {
	if x != nil {
		return x.ValidatorsHash
	}
	return nil
}

func (x *LedgerHeader) GetReserve() string {
	if x != nil {
		return x.Reserve
	}
	return ""
}

func (x *LedgerHeader) GetFeesHash() []byte {
	if x != nil {
		return x.FeesHash
	}
	return nil
}

func (x *LedgerHeader) GetChainId() int64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

type Ledger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header          *LedgerHeader     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	TransactionEnvs []*TransactionEnv `protobuf:"bytes,2,rep,name=transaction_envs,json=transactionEnvs,proto3" json:"transaction_envs,omitempty"`
}

func (x *Ledger) Reset() {
	*x = Ledger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ledger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ledger) ProtoMessage() {}

func (x *Ledger) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ledger.ProtoReflect.Descriptor instead.
func (*Ledger) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{3}
}

func (x *Ledger) GetHeader() *LedgerHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Ledger) GetTransactionEnvs() []*TransactionEnv {
	if x != nil {
		return x.TransactionEnvs
	}
	return nil
}

type OperationTypeThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      Operation_Type `protobuf:"varint,1,opt,name=type,proto3,enum=protocol.Operation_Type" json:"type,omitempty"`
	Threshold int64          `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *OperationTypeThreshold) Reset() {
	*x = OperationTypeThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationTypeThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationTypeThreshold) ProtoMessage() {}

func (x *OperationTypeThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationTypeThreshold.ProtoReflect.Descriptor instead.
func (*OperationTypeThreshold) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{4}
}

func (x *OperationTypeThreshold) GetType() Operation_Type {
	if x != nil {
		return x.Type
	}
	return Operation_UNKNOWN
}

func (x *OperationTypeThreshold) GetThreshold() int64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

type AccountPrivilege struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterWeight int64             `protobuf:"varint,1,opt,name=master_weight,json=masterWeight,proto3" json:"master_weight,omitempty"`
	Signers      []*Signer         `protobuf:"bytes,2,rep,name=signers,proto3" json:"signers,omitempty"`
	Thresholds   *AccountThreshold `protobuf:"bytes,3,opt,name=thresholds,proto3" json:"thresholds,omitempty"`
}

func (x *AccountPrivilege) Reset() {
	*x = AccountPrivilege{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountPrivilege) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountPrivilege) ProtoMessage() {}

func (x *AccountPrivilege) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountPrivilege.ProtoReflect.Descriptor instead.
func (*AccountPrivilege) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{5}
}

func (x *AccountPrivilege) GetMasterWeight() int64 {
	if x != nil {
		return x.MasterWeight
	}
	return 0
}

func (x *AccountPrivilege) GetSigners() []*Signer {
	if x != nil {
		return x.Signers
	}
	return nil
}

func (x *AccountPrivilege) GetThresholds() *AccountThreshold {
	if x != nil {
		return x.Thresholds
	}
	return nil
}

type AccountThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxThreshold    int64                     `protobuf:"varint,1,opt,name=tx_threshold,json=txThreshold,proto3" json:"tx_threshold,omitempty"` //required, [-1,MAX(INT64)] -1: indicates no setting
	TypeThresholds []*OperationTypeThreshold `protobuf:"bytes,2,rep,name=type_thresholds,json=typeThresholds,proto3" json:"type_thresholds,omitempty"`
}

func (x *AccountThreshold) Reset() {
	*x = AccountThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountThreshold) ProtoMessage() {}

func (x *AccountThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountThreshold.ProtoReflect.Descriptor instead.
func (*AccountThreshold) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{6}
}

func (x *AccountThreshold) GetTxThreshold() int64 {
	if x != nil {
		return x.TxThreshold
	}
	return 0
}

func (x *AccountThreshold) GetTypeThresholds() []*OperationTypeThreshold {
	if x != nil {
		return x.TypeThresholds
	}
	return nil
}

type OperationPayCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestAddress    string `protobuf:"bytes,1,opt,name=dest_address,json=destAddress,proto3" json:"dest_address,omitempty"`
	Amount         int64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Input          string `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	RawDestAddress []byte `protobuf:"bytes,4,opt,name=raw_dest_address,json=rawDestAddress,proto3" json:"raw_dest_address,omitempty"`
}

func (x *OperationPayCoin) Reset() {
	*x = OperationPayCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationPayCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationPayCoin) ProtoMessage() {}

func (x *OperationPayCoin) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationPayCoin.ProtoReflect.Descriptor instead.
func (*OperationPayCoin) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{7}
}

func (x *OperationPayCoin) GetDestAddress() string {
	if x != nil {
		return x.DestAddress
	}
	return ""
}

func (x *OperationPayCoin) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *OperationPayCoin) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *OperationPayCoin) GetRawDestAddress() []byte {
	if x != nil {
		return x.RawDestAddress
	}
	return nil
}

type OperationSetSignerWeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterWeight int64     `protobuf:"varint,1,opt,name=master_weight,json=masterWeight,proto3" json:"master_weight,omitempty"` //required, [-1,MAX(UINT32)] -1: indicates no setting
	Signers      []*Signer `protobuf:"bytes,2,rep,name=signers,proto3" json:"signers,omitempty"`                                //address:weight, if weight is 0, it indicates deleting this signer
}

func (x *OperationSetSignerWeight) Reset() {
	*x = OperationSetSignerWeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationSetSignerWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationSetSignerWeight) ProtoMessage() {}

func (x *OperationSetSignerWeight) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationSetSignerWeight.ProtoReflect.Descriptor instead.
func (*OperationSetSignerWeight) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{8}
}

func (x *OperationSetSignerWeight) GetMasterWeight() int64 {
	if x != nil {
		return x.MasterWeight
	}
	return 0
}

func (x *OperationSetSignerWeight) GetSigners() []*Signer {
	if x != nil {
		return x.Signers
	}
	return nil
}

type OperationLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Datas []string `protobuf:"bytes,2,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *OperationLog) Reset() {
	*x = OperationLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationLog) ProtoMessage() {}

func (x *OperationLog) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationLog.ProtoReflect.Descriptor instead.
func (*OperationLog) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{9}
}

func (x *OperationLog) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *OperationLog) GetDatas() []string {
	if x != nil {
		return x.Datas
	}
	return nil
}

type OperationSetPrivilege struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterWeight   string                    `protobuf:"bytes,1,opt,name=master_weight,json=masterWeight,proto3" json:"master_weight,omitempty"`
	Signers        []*Signer                 `protobuf:"bytes,2,rep,name=signers,proto3" json:"signers,omitempty"`
	TxThreshold    string                    `protobuf:"bytes,3,opt,name=tx_threshold,json=txThreshold,proto3" json:"tx_threshold,omitempty"`
	TypeThresholds []*OperationTypeThreshold `protobuf:"bytes,4,rep,name=type_thresholds,json=typeThresholds,proto3" json:"type_thresholds,omitempty"`
}

func (x *OperationSetPrivilege) Reset() {
	*x = OperationSetPrivilege{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationSetPrivilege) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationSetPrivilege) ProtoMessage() {}

func (x *OperationSetPrivilege) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationSetPrivilege.ProtoReflect.Descriptor instead.
func (*OperationSetPrivilege) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{10}
}

func (x *OperationSetPrivilege) GetMasterWeight() string {
	if x != nil {
		return x.MasterWeight
	}
	return ""
}

func (x *OperationSetPrivilege) GetSigners() []*Signer {
	if x != nil {
		return x.Signers
	}
	return nil
}

func (x *OperationSetPrivilege) GetTxThreshold() string {
	if x != nil {
		return x.TxThreshold
	}
	return ""
}

func (x *OperationSetPrivilege) GetTypeThresholds() []*OperationTypeThreshold {
	if x != nil {
		return x.TypeThresholds
	}
	return nil
}

type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          Operation_Type `protobuf:"varint,1,opt,name=type,proto3,enum=protocol.Operation_Type" json:"type,omitempty"`
	SourceAddress string         `protobuf:"bytes,2,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	Metadata      []byte         `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	//
	CreateAccount         *OperationCreateAccount         `protobuf:"bytes,4,opt,name=create_account,json=createAccount,proto3" json:"create_account,omitempty"`
	SetMetadata           *OperationSetMetadata           `protobuf:"bytes,7,opt,name=set_metadata,json=setMetadata,proto3" json:"set_metadata,omitempty"`
	SetSignerWeight       *OperationSetSignerWeight       `protobuf:"bytes,8,opt,name=set_signer_weight,json=setSignerWeight,proto3" json:"set_signer_weight,omitempty"`
	SetThreshold          *OperationSetThreshold          `protobuf:"bytes,9,opt,name=set_threshold,json=setThreshold,proto3" json:"set_threshold,omitempty"`
	PayCoin               *OperationPayCoin               `protobuf:"bytes,10,opt,name=pay_coin,json=payCoin,proto3" json:"pay_coin,omitempty"`
	Log                   *OperationLog                   `protobuf:"bytes,11,opt,name=log,proto3" json:"log,omitempty"`
	SetPrivilege          *OperationSetPrivilege          `protobuf:"bytes,12,opt,name=set_privilege,json=setPrivilege,proto3" json:"set_privilege,omitempty"`
	UpgradeContract       *OperationUpgradeContract       `protobuf:"bytes,13,opt,name=upgrade_contract,json=upgradeContract,proto3" json:"upgrade_contract,omitempty"`
	SetControlledArea     *OperationSetControlledArea     `protobuf:"bytes,14,opt,name=set_controlled_area,json=setControlledArea,proto3" json:"set_controlled_area,omitempty"`
	CreatePrivateContract *OperationCreatePrivateContract `protobuf:"bytes,15,opt,name=create_private_contract,json=createPrivateContract,proto3" json:"create_private_contract,omitempty"`
	CallPrivateContract   *OperationCallPrivateContract   `protobuf:"bytes,16,opt,name=call_private_contract,json=callPrivateContract,proto3" json:"call_private_contract,omitempty"`
	RawSourceAddress      []byte                          `protobuf:"bytes,20,opt,name=raw_source_address,json=rawSourceAddress,proto3" json:"raw_source_address,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{11}
}

func (x *Operation) GetType() Operation_Type {
	if x != nil {
		return x.Type
	}
	return Operation_UNKNOWN
}

func (x *Operation) GetSourceAddress() string {
	if x != nil {
		return x.SourceAddress
	}
	return ""
}

func (x *Operation) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Operation) GetCreateAccount() *OperationCreateAccount {
	if x != nil {
		return x.CreateAccount
	}
	return nil
}

func (x *Operation) GetSetMetadata() *OperationSetMetadata {
	if x != nil {
		return x.SetMetadata
	}
	return nil
}

func (x *Operation) GetSetSignerWeight() *OperationSetSignerWeight {
	if x != nil {
		return x.SetSignerWeight
	}
	return nil
}

func (x *Operation) GetSetThreshold() *OperationSetThreshold {
	if x != nil {
		return x.SetThreshold
	}
	return nil
}

func (x *Operation) GetPayCoin() *OperationPayCoin {
	if x != nil {
		return x.PayCoin
	}
	return nil
}

func (x *Operation) GetLog() *OperationLog {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *Operation) GetSetPrivilege() *OperationSetPrivilege {
	if x != nil {
		return x.SetPrivilege
	}
	return nil
}

func (x *Operation) GetUpgradeContract() *OperationUpgradeContract {
	if x != nil {
		return x.UpgradeContract
	}
	return nil
}

func (x *Operation) GetSetControlledArea() *OperationSetControlledArea {
	if x != nil {
		return x.SetControlledArea
	}
	return nil
}

func (x *Operation) GetCreatePrivateContract() *OperationCreatePrivateContract {
	if x != nil {
		return x.CreatePrivateContract
	}
	return nil
}

func (x *Operation) GetCallPrivateContract() *OperationCallPrivateContract {
	if x != nil {
		return x.CallPrivateContract
	}
	return nil
}

func (x *Operation) GetRawSourceAddress() []byte {
	if x != nil {
		return x.RawSourceAddress
	}
	return nil
}

type OperationSetThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxThreshold    int64                     `protobuf:"varint,1,opt,name=tx_threshold,json=txThreshold,proto3" json:"tx_threshold,omitempty"`
	TypeThresholds []*OperationTypeThreshold `protobuf:"bytes,4,rep,name=type_thresholds,json=typeThresholds,proto3" json:"type_thresholds,omitempty"` //type:threshold, threshold:0 indicates deleting this type
}

func (x *OperationSetThreshold) Reset() {
	*x = OperationSetThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationSetThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationSetThreshold) ProtoMessage() {}

func (x *OperationSetThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationSetThreshold.ProtoReflect.Descriptor instead.
func (*OperationSetThreshold) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{12}
}

func (x *OperationSetThreshold) GetTxThreshold() int64 {
	if x != nil {
		return x.TxThreshold
	}
	return 0
}

func (x *OperationSetThreshold) GetTypeThresholds() []*OperationTypeThreshold {
	if x != nil {
		return x.TypeThresholds
	}
	return nil
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceAddress    string       `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	Nonce            int64        `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ExprCondition    string       `protobuf:"bytes,3,opt,name=expr_condition,json=exprCondition,proto3" json:"expr_condition,omitempty"`
	Operations       []*Operation `protobuf:"bytes,4,rep,name=operations,proto3" json:"operations,omitempty"`
	Metadata         []byte       `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	FeeLimit         int64        `protobuf:"varint,6,opt,name=fee_limit,json=feeLimit,proto3" json:"fee_limit,omitempty"`
	GasPrice         int64        `protobuf:"varint,7,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	CeilLedgerSeq    int64        `protobuf:"varint,8,opt,name=ceil_ledger_seq,json=ceilLedgerSeq,proto3" json:"ceil_ledger_seq,omitempty"`
	ChainId          int64        `protobuf:"varint,9,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	AddressPrefix    string       `protobuf:"bytes,10,opt,name=address_prefix,json=addressPrefix,proto3" json:"address_prefix,omitempty"` //it represent the address is raw
	RawSourceAddress []byte       `protobuf:"bytes,11,opt,name=raw_source_address,json=rawSourceAddress,proto3" json:"raw_source_address,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{13}
}

func (x *Transaction) GetSourceAddress() string {
	if x != nil {
		return x.SourceAddress
	}
	return ""
}

func (x *Transaction) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *Transaction) GetExprCondition() string {
	if x != nil {
		return x.ExprCondition
	}
	return ""
}

func (x *Transaction) GetOperations() []*Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *Transaction) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Transaction) GetFeeLimit() int64 {
	if x != nil {
		return x.FeeLimit
	}
	return 0
}

func (x *Transaction) GetGasPrice() int64 {
	if x != nil {
		return x.GasPrice
	}
	return 0
}

func (x *Transaction) GetCeilLedgerSeq() int64 {
	if x != nil {
		return x.CeilLedgerSeq
	}
	return 0
}

func (x *Transaction) GetChainId() int64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *Transaction) GetAddressPrefix() string {
	if x != nil {
		return x.AddressPrefix
	}
	return ""
}

func (x *Transaction) GetRawSourceAddress() []byte {
	if x != nil {
		return x.RawSourceAddress
	}
	return nil
}

type Signer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Weight  int64  `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *Signer) Reset() {
	*x = Signer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signer) ProtoMessage() {}

func (x *Signer) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signer.ProtoReflect.Descriptor instead.
func (*Signer) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{14}
}

func (x *Signer) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Signer) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type Trigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionType Trigger_TransactionType   `protobuf:"varint,1,opt,name=transaction_type,json=transactionType,proto3,enum=protocol.Trigger_TransactionType" json:"transaction_type,omitempty"`
	LedgerSeq       int64                     `protobuf:"varint,2,opt,name=ledger_seq,json=ledgerSeq,proto3" json:"ledger_seq,omitempty"` //If it is triggered by a specific block (temporarily not provided)
	Transaction     *Trigger_OperationTrigger `protobuf:"bytes,3,opt,name=transaction,proto3" json:"transaction,omitempty"`               //If it's a transaction triggered
}

func (x *Trigger) Reset() {
	*x = Trigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger) ProtoMessage() {}

func (x *Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger.ProtoReflect.Descriptor instead.
func (*Trigger) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{15}
}

func (x *Trigger) GetTransactionType() Trigger_TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return Trigger_NORMAL_TRANSACTION
}

func (x *Trigger) GetLedgerSeq() int64 {
	if x != nil {
		return x.LedgerSeq
	}
	return 0
}

func (x *Trigger) GetTransaction() *Trigger_OperationTrigger {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type TransactionEnv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Signatures  []*Signature `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
	Trigger     *Trigger     `protobuf:"bytes,3,opt,name=trigger,proto3" json:"trigger,omitempty"`
}

func (x *TransactionEnv) Reset() {
	*x = TransactionEnv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionEnv) ProtoMessage() {}

func (x *TransactionEnv) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionEnv.ProtoReflect.Descriptor instead.
func (*TransactionEnv) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{16}
}

func (x *TransactionEnv) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *TransactionEnv) GetSignatures() []*Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *TransactionEnv) GetTrigger() *Trigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

type TransactionEnvStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionEnv *TransactionEnv `protobuf:"bytes,1,opt,name=transaction_env,json=transactionEnv,proto3" json:"transaction_env,omitempty"`
	ErrorCode      int32           `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorDesc      string          `protobuf:"bytes,3,opt,name=error_desc,json=errorDesc,proto3" json:"error_desc,omitempty"`
	LedgerSeq      int64           `protobuf:"varint,4,opt,name=ledger_seq,json=ledgerSeq,proto3" json:"ledger_seq,omitempty"`
	CloseTime      int64           `protobuf:"varint,5,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`
	//for notify
	Hash             []byte   `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
	ActualFee        int64    `protobuf:"varint,7,opt,name=actual_fee,json=actualFee,proto3" json:"actual_fee,omitempty"`
	ContractTxHashes [][]byte `protobuf:"bytes,8,rep,name=contract_tx_hashes,json=contractTxHashes,proto3" json:"contract_tx_hashes,omitempty"`
}

func (x *TransactionEnvStore) Reset() {
	*x = TransactionEnvStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionEnvStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionEnvStore) ProtoMessage() {}

func (x *TransactionEnvStore) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionEnvStore.ProtoReflect.Descriptor instead.
func (*TransactionEnvStore) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{17}
}

func (x *TransactionEnvStore) GetTransactionEnv() *TransactionEnv {
	if x != nil {
		return x.TransactionEnv
	}
	return nil
}

func (x *TransactionEnvStore) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *TransactionEnvStore) GetErrorDesc() string {
	if x != nil {
		return x.ErrorDesc
	}
	return ""
}

func (x *TransactionEnvStore) GetLedgerSeq() int64 {
	if x != nil {
		return x.LedgerSeq
	}
	return 0
}

func (x *TransactionEnvStore) GetCloseTime() int64 {
	if x != nil {
		return x.CloseTime
	}
	return 0
}

func (x *TransactionEnvStore) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *TransactionEnvStore) GetActualFee() int64 {
	if x != nil {
		return x.ActualFee
	}
	return 0
}

func (x *TransactionEnvStore) GetContractTxHashes() [][]byte {
	if x != nil {
		return x.ContractTxHashes
	}
	return nil
}

type TransactionEnvSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txs []*TransactionEnv `protobuf:"bytes,2,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (x *TransactionEnvSet) Reset() {
	*x = TransactionEnvSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionEnvSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionEnvSet) ProtoMessage() {}

func (x *TransactionEnvSet) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionEnvSet.ProtoReflect.Descriptor instead.
func (*TransactionEnvSet) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{18}
}

func (x *TransactionEnvSet) GetTxs() []*TransactionEnv {
	if x != nil {
		return x.Txs
	}
	return nil
}

type ConsensusValueValidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpireTxIds []int32 `protobuf:"varint,1,rep,packed,name=expire_tx_ids,json=expireTxIds,proto3" json:"expire_tx_ids,omitempty"` //Contract execution expired
	ErrorTxIds  []int32 `protobuf:"varint,2,rep,packed,name=error_tx_ids,json=errorTxIds,proto3" json:"error_tx_ids,omitempty"`
	//May contain other checks
	SuccTxCount int32 `protobuf:"varint,3,opt,name=succ_tx_count,json=succTxCount,proto3" json:"succ_tx_count,omitempty"`
}

func (x *ConsensusValueValidation) Reset() {
	*x = ConsensusValueValidation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusValueValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusValueValidation) ProtoMessage() {}

func (x *ConsensusValueValidation) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusValueValidation.ProtoReflect.Descriptor instead.
func (*ConsensusValueValidation) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{19}
}

func (x *ConsensusValueValidation) GetExpireTxIds() []int32 {
	if x != nil {
		return x.ExpireTxIds
	}
	return nil
}

func (x *ConsensusValueValidation) GetErrorTxIds() []int32 {
	if x != nil {
		return x.ErrorTxIds
	}
	return nil
}

func (x *ConsensusValueValidation) GetSuccTxCount() int32 {
	if x != nil {
		return x.SuccTxCount
	}
	return 0
}

type ConsensusValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txset              *TransactionEnvSet        `protobuf:"bytes,1,opt,name=txset,proto3" json:"txset,omitempty"`
	CloseTime          int64                     `protobuf:"varint,2,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`
	PreviousProof      []byte                    `protobuf:"bytes,3,opt,name=previous_proof,json=previousProof,proto3" json:"previous_proof,omitempty"`
	LedgerSeq          int64                     `protobuf:"varint,4,opt,name=ledger_seq,json=ledgerSeq,proto3" json:"ledger_seq,omitempty"`
	PreviousLedgerHash []byte                    `protobuf:"bytes,5,opt,name=previous_ledger_hash,json=previousLedgerHash,proto3" json:"previous_ledger_hash,omitempty"`
	LedgerUpgrade      *LedgerUpgrade            `protobuf:"bytes,6,opt,name=ledger_upgrade,json=ledgerUpgrade,proto3" json:"ledger_upgrade,omitempty"`
	Validation         *ConsensusValueValidation `protobuf:"bytes,7,opt,name=validation,proto3" json:"validation,omitempty"`
	Txs                []byte                    `protobuf:"bytes,8,opt,name=txs,proto3" json:"txs,omitempty"`
	Txhash             []byte                    `protobuf:"bytes,9,opt,name=txhash,proto3" json:"txhash,omitempty"`
}

func (x *ConsensusValue) Reset() {
	*x = ConsensusValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusValue) ProtoMessage() {}

func (x *ConsensusValue) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusValue.ProtoReflect.Descriptor instead.
func (*ConsensusValue) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{20}
}

func (x *ConsensusValue) GetTxset() *TransactionEnvSet {
	if x != nil {
		return x.Txset
	}
	return nil
}

func (x *ConsensusValue) GetCloseTime() int64 {
	if x != nil {
		return x.CloseTime
	}
	return 0
}

func (x *ConsensusValue) GetPreviousProof() []byte {
	if x != nil {
		return x.PreviousProof
	}
	return nil
}

func (x *ConsensusValue) GetLedgerSeq() int64 {
	if x != nil {
		return x.LedgerSeq
	}
	return 0
}

func (x *ConsensusValue) GetPreviousLedgerHash() []byte {
	if x != nil {
		return x.PreviousLedgerHash
	}
	return nil
}

func (x *ConsensusValue) GetLedgerUpgrade() *LedgerUpgrade {
	if x != nil {
		return x.LedgerUpgrade
	}
	return nil
}

func (x *ConsensusValue) GetValidation() *ConsensusValueValidation {
	if x != nil {
		return x.Validation
	}
	return nil
}

func (x *ConsensusValue) GetTxs() []byte {
	if x != nil {
		return x.Txs
	}
	return nil
}

func (x *ConsensusValue) GetTxhash() []byte {
	if x != nil {
		return x.Txhash
	}
	return nil
}

type Contract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    Contract_ContractType `protobuf:"varint,1,opt,name=type,proto3,enum=protocol.Contract_ContractType" json:"type,omitempty"`
	Payload string                `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Version int64                 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Contract) Reset() {
	*x = Contract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract) ProtoMessage() {}

func (x *Contract) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract.ProtoReflect.Descriptor instead.
func (*Contract) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{21}
}

func (x *Contract) GetType() Contract_ContractType {
	if x != nil {
		return x.Type
	}
	return Contract_JAVASCRIPT
}

func (x *Contract) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *Contract) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type OperationCreateAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestAddress    string            `protobuf:"bytes,1,opt,name=dest_address,json=destAddress,proto3" json:"dest_address,omitempty"`
	Contract       *Contract         `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
	Priv           *AccountPrivilege `protobuf:"bytes,3,opt,name=priv,proto3" json:"priv,omitempty"`
	Metadatas      []*KeyPair        `protobuf:"bytes,4,rep,name=metadatas,proto3" json:"metadatas,omitempty"`
	InitBalance    int64             `protobuf:"varint,5,opt,name=init_balance,json=initBalance,proto3" json:"init_balance,omitempty"`
	InitInput      string            `protobuf:"bytes,6,opt,name=init_input,json=initInput,proto3" json:"init_input,omitempty"`
	DestPublicKey  string            `protobuf:"bytes,7,opt,name=dest_public_key,json=destPublicKey,proto3" json:"dest_public_key,omitempty"`
	RawDestAddress []byte            `protobuf:"bytes,8,opt,name=raw_dest_address,json=rawDestAddress,proto3" json:"raw_dest_address,omitempty"`
}

func (x *OperationCreateAccount) Reset() {
	*x = OperationCreateAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationCreateAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationCreateAccount) ProtoMessage() {}

func (x *OperationCreateAccount) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationCreateAccount.ProtoReflect.Descriptor instead.
func (*OperationCreateAccount) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{22}
}

func (x *OperationCreateAccount) GetDestAddress() string {
	if x != nil {
		return x.DestAddress
	}
	return ""
}

func (x *OperationCreateAccount) GetContract() *Contract {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *OperationCreateAccount) GetPriv() *AccountPrivilege {
	if x != nil {
		return x.Priv
	}
	return nil
}

func (x *OperationCreateAccount) GetMetadatas() []*KeyPair {
	if x != nil {
		return x.Metadatas
	}
	return nil
}

func (x *OperationCreateAccount) GetInitBalance() int64 {
	if x != nil {
		return x.InitBalance
	}
	return 0
}

func (x *OperationCreateAccount) GetInitInput() string {
	if x != nil {
		return x.InitInput
	}
	return ""
}

func (x *OperationCreateAccount) GetDestPublicKey() string {
	if x != nil {
		return x.DestPublicKey
	}
	return ""
}

func (x *OperationCreateAccount) GetRawDestAddress() []byte {
	if x != nil {
		return x.RawDestAddress
	}
	return nil
}

type OperationSetMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value      string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Version    int64  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"` //Optional. The version number of metadata. If set, it must be the same as the existing metadata_version of the account.
	DeleteFlag bool   `protobuf:"varint,4,opt,name=delete_flag,json=deleteFlag,proto3" json:"delete_flag,omitempty"`
}

func (x *OperationSetMetadata) Reset() {
	*x = OperationSetMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationSetMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationSetMetadata) ProtoMessage() {}

func (x *OperationSetMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationSetMetadata.ProtoReflect.Descriptor instead.
func (*OperationSetMetadata) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{23}
}

func (x *OperationSetMetadata) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *OperationSetMetadata) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *OperationSetMetadata) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *OperationSetMetadata) GetDeleteFlag() bool {
	if x != nil {
		return x.DeleteFlag
	}
	return false
}

type OperationUpgradeContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestAddress string `protobuf:"bytes,1,opt,name=dest_address,json=destAddress,proto3" json:"dest_address,omitempty"`
	Payload     string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Type        int64  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *OperationUpgradeContract) Reset() {
	*x = OperationUpgradeContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationUpgradeContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationUpgradeContract) ProtoMessage() {}

func (x *OperationUpgradeContract) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationUpgradeContract.ProtoReflect.Descriptor instead.
func (*OperationUpgradeContract) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{24}
}

func (x *OperationUpgradeContract) GetDestAddress() string {
	if x != nil {
		return x.DestAddress
	}
	return ""
}

func (x *OperationUpgradeContract) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *OperationUpgradeContract) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

type OperationSetControlledArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestAddress string                     `protobuf:"bytes,1,opt,name=dest_address,json=destAddress,proto3" json:"dest_address,omitempty"`
	STrusted    bool                       `protobuf:"varint,2,opt,name=s_trusted,json=sTrusted,proto3" json:"s_trusted,omitempty"`
	SStatus     bool                       `protobuf:"varint,3,opt,name=s_status,json=sStatus,proto3" json:"s_status,omitempty"`
	Trusted     ControlledArea_TRUST_FLAG  `protobuf:"varint,4,opt,name=trusted,proto3,enum=protocol.ControlledArea_TRUST_FLAG" json:"trusted,omitempty"`
	Status      ControlledArea_STATUS_FALG `protobuf:"varint,5,opt,name=status,proto3,enum=protocol.ControlledArea_STATUS_FALG" json:"status,omitempty"`
	Attributes  []*KeyPair                 `protobuf:"bytes,6,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *OperationSetControlledArea) Reset() {
	*x = OperationSetControlledArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationSetControlledArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationSetControlledArea) ProtoMessage() {}

func (x *OperationSetControlledArea) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationSetControlledArea.ProtoReflect.Descriptor instead.
func (*OperationSetControlledArea) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{25}
}

func (x *OperationSetControlledArea) GetDestAddress() string {
	if x != nil {
		return x.DestAddress
	}
	return ""
}

func (x *OperationSetControlledArea) GetSTrusted() bool {
	if x != nil {
		return x.STrusted
	}
	return false
}

func (x *OperationSetControlledArea) GetSStatus() bool {
	if x != nil {
		return x.SStatus
	}
	return false
}

func (x *OperationSetControlledArea) GetTrusted() ControlledArea_TRUST_FLAG {
	if x != nil {
		return x.Trusted
	}
	return ControlledArea_UNCERT
}

func (x *OperationSetControlledArea) GetStatus() ControlledArea_STATUS_FALG {
	if x != nil {
		return x.Status
	}
	return ControlledArea_ENABLED
}

func (x *OperationSetControlledArea) GetAttributes() []*KeyPair {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type OperationCreatePrivateContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contract  *Contract `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	InitInput string    `protobuf:"bytes,2,opt,name=init_input,json=initInput,proto3" json:"init_input,omitempty"`
}

func (x *OperationCreatePrivateContract) Reset() {
	*x = OperationCreatePrivateContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationCreatePrivateContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationCreatePrivateContract) ProtoMessage() {}

func (x *OperationCreatePrivateContract) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationCreatePrivateContract.ProtoReflect.Descriptor instead.
func (*OperationCreatePrivateContract) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{26}
}

func (x *OperationCreatePrivateContract) GetContract() *Contract {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *OperationCreatePrivateContract) GetInitInput() string {
	if x != nil {
		return x.InitInput
	}
	return ""
}

type OperationCallPrivateContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestAddress string `protobuf:"bytes,1,opt,name=dest_address,json=destAddress,proto3" json:"dest_address,omitempty"`
	Input       string `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *OperationCallPrivateContract) Reset() {
	*x = OperationCallPrivateContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationCallPrivateContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationCallPrivateContract) ProtoMessage() {}

func (x *OperationCallPrivateContract) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationCallPrivateContract.ProtoReflect.Descriptor instead.
func (*OperationCallPrivateContract) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{27}
}

func (x *OperationCallPrivateContract) GetDestAddress() string {
	if x != nil {
		return x.DestAddress
	}
	return ""
}

func (x *OperationCallPrivateContract) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

type PrivateContractAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address       string    `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	MetadatasHash []byte    `protobuf:"bytes,2,opt,name=metadatas_hash,json=metadatasHash,proto3" json:"metadatas_hash,omitempty"` //metadatas_hash = merklehash(metadatas);
	Contract      *Contract `protobuf:"bytes,3,opt,name=contract,proto3" json:"contract,omitempty"`
}

func (x *PrivateContractAccount) Reset() {
	*x = PrivateContractAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateContractAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateContractAccount) ProtoMessage() {}

func (x *PrivateContractAccount) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateContractAccount.ProtoReflect.Descriptor instead.
func (*PrivateContractAccount) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{28}
}

func (x *PrivateContractAccount) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PrivateContractAccount) GetMetadatasHash() []byte {
	if x != nil {
		return x.MetadatasHash
	}
	return nil
}

func (x *PrivateContractAccount) GetContract() *Contract {
	if x != nil {
		return x.Contract
	}
	return nil
}

type Trigger_OperationTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash  []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Index int64  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Trigger_OperationTrigger) Reset() {
	*x = Trigger_OperationTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger_OperationTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_OperationTrigger) ProtoMessage() {}

func (x *Trigger_OperationTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_chain_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger_OperationTrigger.ProtoReflect.Descriptor instead.
func (*Trigger_OperationTrigger) Descriptor() ([]byte, []int) {
	return file_chain_proto_rawDescGZIP(), []int{15, 0}
}

func (x *Trigger_OperationTrigger) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Trigger_OperationTrigger) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

var File_chain_proto protoreflect.FileDescriptor

var file_chain_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x02, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x70, 0x72, 0x69, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x52, 0x04, 0x70, 0x72, 0x69,
	0x76, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x64, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0xa0, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x12, 0x3d, 0x0a, 0x07, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x41,
	0x72, 0x65, 0x61, 0x2e, 0x54, 0x52, 0x55, 0x53, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x52, 0x07,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x41, 0x72, 0x65,
	0x61, 0x2e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x4c, 0x47, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x34, 0x0a, 0x0a, 0x54, 0x52, 0x55, 0x53,
	0x54, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x43, 0x45, 0x52, 0x54,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x52, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x54, 0x52, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x02, 0x22, 0x28,
	0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x4c, 0x47, 0x12, 0x0b, 0x0a,
	0x07, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x22, 0x86, 0x03, 0x0a, 0x0c, 0x4c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x74, 0x72, 0x65, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x65, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74,
	0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65, 0x65,
	0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x65,
	0x65, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x22, 0x7d, 0x0a, 0x06, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x76, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x73,
	0x22, 0x64, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x2a, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0a,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x0a, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x78, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x49, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x0e, 0x74, 0x79, 0x70,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x10,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x72, 0x61, 0x77,
	0x44, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x6b, 0x0a, 0x18, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x07,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x52,
	0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x15, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x78, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x49, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x0e, 0x74,
	0x79, 0x70, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x22, 0xcd, 0x09,
	0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x0e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x73, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x52, 0x0c, 0x73, 0x65, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x35,
	0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12,
	0x44, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x54, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x52, 0x11, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x12, 0x60, 0x0a, 0x17, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x5a, 0x0a, 0x15,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x13, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x61, 0x77, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x61, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41,
	0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x52,
	0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x54,
	0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08,
	0x50, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f,
	0x47, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x49,
	0x4c, 0x45, 0x47, 0x45, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x41,
	0x52, 0x45, 0x41, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54,
	0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x0d, 0x22, 0x85, 0x01,
	0x0a, 0x15, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74,
	0x78, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x49, 0x0a, 0x0f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x73, 0x22, 0xbb, 0x03, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x72,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66,
	0x65, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x65, 0x69, 0x6c, 0x5f, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63,
	0x65, 0x69, 0x6c, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x53, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x2c,
	0x0a, 0x12, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x61, 0x77, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x25, 0x0a, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0a, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x10, 0xe8, 0x07, 0x22, 0x60, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x24, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x49, 0x47, 0x4e,
	0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x47,
	0x4e, 0x45, 0x52, 0x10, 0x64, 0x22, 0xbf, 0x02, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x12, 0x4c, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x53, 0x65, 0x71, 0x12, 0x44,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3c, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x43, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0xab, 0x01, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x12, 0x37, 0x0a, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0xb5, 0x02, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x41, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x76,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x53, 0x65, 0x71, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x22, 0x3f, 0x0a,
	0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x53,
	0x65, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x52, 0x03, 0x74, 0x78, 0x73, 0x22, 0x84,
	0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x78, 0x49, 0x64, 0x73, 0x12,
	0x20, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x78, 0x49, 0x64,
	0x73, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x75, 0x63, 0x63, 0x5f, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x75, 0x63, 0x63, 0x54, 0x78,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x88, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x78, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x76, 0x53, 0x65, 0x74, 0x52, 0x05, 0x74, 0x78, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x71, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x53, 0x65, 0x71,
	0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x0d, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x74, 0x78, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x68, 0x61, 0x73, 0x68,
	0x22, 0xa8, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x33, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x33, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4a, 0x41, 0x56, 0x41, 0x53, 0x43,
	0x52, 0x49, 0x50, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x56, 0x4d, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x02, 0x22, 0xe0, 0x02, 0x0a, 0x16,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x70, 0x72, 0x69,
	0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x52, 0x04, 0x70, 0x72, 0x69, 0x76, 0x12, 0x2f, 0x0a, 0x09, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x09, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e,
	0x69, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x64, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e,
	0x72, 0x61, 0x77, 0x44, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x79,
	0x0a, 0x14, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x6b, 0x0a, 0x18, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa7, 0x02, 0x0a, 0x1a, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x64, 0x41, 0x72, 0x65, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x5f, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x54, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3d, 0x0a, 0x07, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x2e, 0x54, 0x52, 0x55, 0x53,
	0x54, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x52, 0x07, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x12,
	0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x2e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x46, 0x41, 0x4c, 0x47, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x22, 0x6f, 0x0a, 0x1e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x22, 0x57, 0x0a, 0x1c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6c, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x16, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2a, 0x23, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x64, 0x42, 0x0a, 0x5a, 0x08, 0x2e,
	0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chain_proto_rawDescOnce sync.Once
	file_chain_proto_rawDescData = file_chain_proto_rawDesc
)

func file_chain_proto_rawDescGZIP() []byte {
	file_chain_proto_rawDescOnce.Do(func() {
		file_chain_proto_rawDescData = protoimpl.X.CompressGZIP(file_chain_proto_rawDescData)
	})
	return file_chain_proto_rawDescData
}

var file_chain_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_chain_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_chain_proto_goTypes = []interface{}{
	(Limit)(0),                             // 0: protocol.Limit
	(ControlledArea_TRUST_FLAG)(0),         // 1: protocol.ControlledArea.TRUST_FLAG
	(ControlledArea_STATUS_FALG)(0),        // 2: protocol.ControlledArea.STATUS_FALG
	(Operation_Type)(0),                    // 3: protocol.Operation.Type
	(Transaction_Limit)(0),                 // 4: protocol.Transaction.Limit
	(Signer_Limit)(0),                      // 5: protocol.Signer.Limit
	(Trigger_TransactionType)(0),           // 6: protocol.Trigger.TransactionType
	(Contract_ContractType)(0),             // 7: protocol.Contract.ContractType
	(*Account)(nil),                        // 8: protocol.Account
	(*ControlledArea)(nil),                 // 9: protocol.ControlledArea
	(*LedgerHeader)(nil),                   // 10: protocol.LedgerHeader
	(*Ledger)(nil),                         // 11: protocol.Ledger
	(*OperationTypeThreshold)(nil),         // 12: protocol.OperationTypeThreshold
	(*AccountPrivilege)(nil),               // 13: protocol.AccountPrivilege
	(*AccountThreshold)(nil),               // 14: protocol.AccountThreshold
	(*OperationPayCoin)(nil),               // 15: protocol.OperationPayCoin
	(*OperationSetSignerWeight)(nil),       // 16: protocol.OperationSetSignerWeight
	(*OperationLog)(nil),                   // 17: protocol.OperationLog
	(*OperationSetPrivilege)(nil),          // 18: protocol.OperationSetPrivilege
	(*Operation)(nil),                      // 19: protocol.Operation
	(*OperationSetThreshold)(nil),          // 20: protocol.OperationSetThreshold
	(*Transaction)(nil),                    // 21: protocol.Transaction
	(*Signer)(nil),                         // 22: protocol.Signer
	(*Trigger)(nil),                        // 23: protocol.Trigger
	(*TransactionEnv)(nil),                 // 24: protocol.TransactionEnv
	(*TransactionEnvStore)(nil),            // 25: protocol.TransactionEnvStore
	(*TransactionEnvSet)(nil),              // 26: protocol.TransactionEnvSet
	(*ConsensusValueValidation)(nil),       // 27: protocol.ConsensusValueValidation
	(*ConsensusValue)(nil),                 // 28: protocol.ConsensusValue
	(*Contract)(nil),                       // 29: protocol.Contract
	(*OperationCreateAccount)(nil),         // 30: protocol.OperationCreateAccount
	(*OperationSetMetadata)(nil),           // 31: protocol.OperationSetMetadata
	(*OperationUpgradeContract)(nil),       // 32: protocol.OperationUpgradeContract
	(*OperationSetControlledArea)(nil),     // 33: protocol.OperationSetControlledArea
	(*OperationCreatePrivateContract)(nil), // 34: protocol.OperationCreatePrivateContract
	(*OperationCallPrivateContract)(nil),   // 35: protocol.OperationCallPrivateContract
	(*PrivateContractAccount)(nil),         // 36: protocol.PrivateContractAccount
	(*Trigger_OperationTrigger)(nil),       // 37: protocol.Trigger.OperationTrigger
	(*KeyPair)(nil),                        // 38: protocol.KeyPair
	(*Signature)(nil),                      // 39: protocol.Signature
	(*LedgerUpgrade)(nil),                  // 40: protocol.LedgerUpgrade
}
var file_chain_proto_depIdxs = []int32{
	13, // 0: protocol.Account.priv:type_name -> protocol.AccountPrivilege
	29, // 1: protocol.Account.contract:type_name -> protocol.Contract
	9,  // 2: protocol.Account.controlled_area:type_name -> protocol.ControlledArea
	1,  // 3: protocol.ControlledArea.trusted:type_name -> protocol.ControlledArea.TRUST_FLAG
	2,  // 4: protocol.ControlledArea.status:type_name -> protocol.ControlledArea.STATUS_FALG
	38, // 5: protocol.ControlledArea.attributes:type_name -> protocol.KeyPair
	10, // 6: protocol.Ledger.header:type_name -> protocol.LedgerHeader
	24, // 7: protocol.Ledger.transaction_envs:type_name -> protocol.TransactionEnv
	3,  // 8: protocol.OperationTypeThreshold.type:type_name -> protocol.Operation.Type
	22, // 9: protocol.AccountPrivilege.signers:type_name -> protocol.Signer
	14, // 10: protocol.AccountPrivilege.thresholds:type_name -> protocol.AccountThreshold
	12, // 11: protocol.AccountThreshold.type_thresholds:type_name -> protocol.OperationTypeThreshold
	22, // 12: protocol.OperationSetSignerWeight.signers:type_name -> protocol.Signer
	22, // 13: protocol.OperationSetPrivilege.signers:type_name -> protocol.Signer
	12, // 14: protocol.OperationSetPrivilege.type_thresholds:type_name -> protocol.OperationTypeThreshold
	3,  // 15: protocol.Operation.type:type_name -> protocol.Operation.Type
	30, // 16: protocol.Operation.create_account:type_name -> protocol.OperationCreateAccount
	31, // 17: protocol.Operation.set_metadata:type_name -> protocol.OperationSetMetadata
	16, // 18: protocol.Operation.set_signer_weight:type_name -> protocol.OperationSetSignerWeight
	20, // 19: protocol.Operation.set_threshold:type_name -> protocol.OperationSetThreshold
	15, // 20: protocol.Operation.pay_coin:type_name -> protocol.OperationPayCoin
	17, // 21: protocol.Operation.log:type_name -> protocol.OperationLog
	18, // 22: protocol.Operation.set_privilege:type_name -> protocol.OperationSetPrivilege
	32, // 23: protocol.Operation.upgrade_contract:type_name -> protocol.OperationUpgradeContract
	33, // 24: protocol.Operation.set_controlled_area:type_name -> protocol.OperationSetControlledArea
	34, // 25: protocol.Operation.create_private_contract:type_name -> protocol.OperationCreatePrivateContract
	35, // 26: protocol.Operation.call_private_contract:type_name -> protocol.OperationCallPrivateContract
	12, // 27: protocol.OperationSetThreshold.type_thresholds:type_name -> protocol.OperationTypeThreshold
	19, // 28: protocol.Transaction.operations:type_name -> protocol.Operation
	6,  // 29: protocol.Trigger.transaction_type:type_name -> protocol.Trigger.TransactionType
	37, // 30: protocol.Trigger.transaction:type_name -> protocol.Trigger.OperationTrigger
	21, // 31: protocol.TransactionEnv.transaction:type_name -> protocol.Transaction
	39, // 32: protocol.TransactionEnv.signatures:type_name -> protocol.Signature
	23, // 33: protocol.TransactionEnv.trigger:type_name -> protocol.Trigger
	24, // 34: protocol.TransactionEnvStore.transaction_env:type_name -> protocol.TransactionEnv
	24, // 35: protocol.TransactionEnvSet.txs:type_name -> protocol.TransactionEnv
	26, // 36: protocol.ConsensusValue.txset:type_name -> protocol.TransactionEnvSet
	40, // 37: protocol.ConsensusValue.ledger_upgrade:type_name -> protocol.LedgerUpgrade
	27, // 38: protocol.ConsensusValue.validation:type_name -> protocol.ConsensusValueValidation
	7,  // 39: protocol.Contract.type:type_name -> protocol.Contract.ContractType
	29, // 40: protocol.OperationCreateAccount.contract:type_name -> protocol.Contract
	13, // 41: protocol.OperationCreateAccount.priv:type_name -> protocol.AccountPrivilege
	38, // 42: protocol.OperationCreateAccount.metadatas:type_name -> protocol.KeyPair
	1,  // 43: protocol.OperationSetControlledArea.trusted:type_name -> protocol.ControlledArea.TRUST_FLAG
	2,  // 44: protocol.OperationSetControlledArea.status:type_name -> protocol.ControlledArea.STATUS_FALG
	38, // 45: protocol.OperationSetControlledArea.attributes:type_name -> protocol.KeyPair
	29, // 46: protocol.OperationCreatePrivateContract.contract:type_name -> protocol.Contract
	29, // 47: protocol.PrivateContractAccount.contract:type_name -> protocol.Contract
	48, // [48:48] is the sub-list for method output_type
	48, // [48:48] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_chain_proto_init() }
func file_chain_proto_init() {
	if File_chain_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlledArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedgerHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ledger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationTypeThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountPrivilege); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationPayCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationSetSignerWeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationSetPrivilege); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationSetThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionEnv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionEnvStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionEnvSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusValueValidation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationCreateAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationSetMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationUpgradeContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationSetControlledArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationCreatePrivateContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationCallPrivateContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateContractAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger_OperationTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chain_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chain_proto_goTypes,
		DependencyIndexes: file_chain_proto_depIdxs,
		EnumInfos:         file_chain_proto_enumTypes,
		MessageInfos:      file_chain_proto_msgTypes,
	}.Build()
	File_chain_proto = out.File
	file_chain_proto_rawDesc = nil
	file_chain_proto_goTypes = nil
	file_chain_proto_depIdxs = nil
}
