// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: overlay.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OVERLAY_MESSAGE_TYPE int32

const (
	OVERLAY_MESSAGE_TYPE_OVERLAY_MSGTYPE_NONE                  OVERLAY_MESSAGE_TYPE = 0
	OVERLAY_MESSAGE_TYPE_OVERLAY_MSGTYPE_PING                  OVERLAY_MESSAGE_TYPE = 1
	OVERLAY_MESSAGE_TYPE_OVERLAY_MSGTYPE_HELLO                 OVERLAY_MESSAGE_TYPE = 2
	OVERLAY_MESSAGE_TYPE_OVERLAY_MSGTYPE_PEERS                 OVERLAY_MESSAGE_TYPE = 3
	OVERLAY_MESSAGE_TYPE_OVERLAY_MSGTYPE_TRANSACTION           OVERLAY_MESSAGE_TYPE = 4
	OVERLAY_MESSAGE_TYPE_OVERLAY_MSGTYPE_LEDGERS               OVERLAY_MESSAGE_TYPE = 5
	OVERLAY_MESSAGE_TYPE_OVERLAY_MSGTYPE_PBFT                  OVERLAY_MESSAGE_TYPE = 6
	OVERLAY_MESSAGE_TYPE_OVERLAY_MSGTYPE_LEDGER_UPGRADE_NOTIFY OVERLAY_MESSAGE_TYPE = 7 //Broadcast the ledger upgrade status
)

// Enum value maps for OVERLAY_MESSAGE_TYPE.
var (
	OVERLAY_MESSAGE_TYPE_name = map[int32]string{
		0: "OVERLAY_MSGTYPE_NONE",
		1: "OVERLAY_MSGTYPE_PING",
		2: "OVERLAY_MSGTYPE_HELLO",
		3: "OVERLAY_MSGTYPE_PEERS",
		4: "OVERLAY_MSGTYPE_TRANSACTION",
		5: "OVERLAY_MSGTYPE_LEDGERS",
		6: "OVERLAY_MSGTYPE_PBFT",
		7: "OVERLAY_MSGTYPE_LEDGER_UPGRADE_NOTIFY",
	}
	OVERLAY_MESSAGE_TYPE_value = map[string]int32{
		"OVERLAY_MSGTYPE_NONE":                  0,
		"OVERLAY_MSGTYPE_PING":                  1,
		"OVERLAY_MSGTYPE_HELLO":                 2,
		"OVERLAY_MSGTYPE_PEERS":                 3,
		"OVERLAY_MSGTYPE_TRANSACTION":           4,
		"OVERLAY_MSGTYPE_LEDGERS":               5,
		"OVERLAY_MSGTYPE_PBFT":                  6,
		"OVERLAY_MSGTYPE_LEDGER_UPGRADE_NOTIFY": 7,
	}
)

func (x OVERLAY_MESSAGE_TYPE) Enum() *OVERLAY_MESSAGE_TYPE {
	p := new(OVERLAY_MESSAGE_TYPE)
	*p = x
	return p
}

func (x OVERLAY_MESSAGE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OVERLAY_MESSAGE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_overlay_proto_enumTypes[0].Descriptor()
}

func (OVERLAY_MESSAGE_TYPE) Type() protoreflect.EnumType {
	return &file_overlay_proto_enumTypes[0]
}

func (x OVERLAY_MESSAGE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OVERLAY_MESSAGE_TYPE.Descriptor instead.
func (OVERLAY_MESSAGE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_overlay_proto_rawDescGZIP(), []int{0}
}

//message interfaces for java
type ChainMessageType int32

const (
	ChainMessageType_CHAIN_TYPE_NONE         ChainMessageType = 0
	ChainMessageType_CHAIN_HELLO             ChainMessageType = 10 // response with CHAIN_STATUS = 2;
	ChainMessageType_CHAIN_TX_STATUS         ChainMessageType = 11
	ChainMessageType_CHAIN_PEER_ONLINE       ChainMessageType = 12
	ChainMessageType_CHAIN_PEER_OFFLINE      ChainMessageType = 13
	ChainMessageType_CHAIN_PEER_MESSAGE      ChainMessageType = 14
	ChainMessageType_CHAIN_SUBMITTRANSACTION ChainMessageType = 15
	ChainMessageType_CHAIN_LEDGER_HEADER     ChainMessageType = 16 //bifchain notifies the client ledger(protocol::LedgerHeader) when closed
	ChainMessageType_CHAIN_CONTRACT_LOG      ChainMessageType = 17 // smart contract log
	ChainMessageType_CHAIN_LEDGER_TXS        ChainMessageType = 18
	ChainMessageType_CHAIN_SUBSCRIBE_TX      ChainMessageType = 19 //response with CHAIN_RESPONSE
	ChainMessageType_CHAIN_TX_ENV_STORE      ChainMessageType = 20
)

// Enum value maps for ChainMessageType.
var (
	ChainMessageType_name = map[int32]string{
		0:  "CHAIN_TYPE_NONE",
		10: "CHAIN_HELLO",
		11: "CHAIN_TX_STATUS",
		12: "CHAIN_PEER_ONLINE",
		13: "CHAIN_PEER_OFFLINE",
		14: "CHAIN_PEER_MESSAGE",
		15: "CHAIN_SUBMITTRANSACTION",
		16: "CHAIN_LEDGER_HEADER",
		17: "CHAIN_CONTRACT_LOG",
		18: "CHAIN_LEDGER_TXS",
		19: "CHAIN_SUBSCRIBE_TX",
		20: "CHAIN_TX_ENV_STORE",
	}
	ChainMessageType_value = map[string]int32{
		"CHAIN_TYPE_NONE":         0,
		"CHAIN_HELLO":             10,
		"CHAIN_TX_STATUS":         11,
		"CHAIN_PEER_ONLINE":       12,
		"CHAIN_PEER_OFFLINE":      13,
		"CHAIN_PEER_MESSAGE":      14,
		"CHAIN_SUBMITTRANSACTION": 15,
		"CHAIN_LEDGER_HEADER":     16,
		"CHAIN_CONTRACT_LOG":      17,
		"CHAIN_LEDGER_TXS":        18,
		"CHAIN_SUBSCRIBE_TX":      19,
		"CHAIN_TX_ENV_STORE":      20,
	}
)

func (x ChainMessageType) Enum() *ChainMessageType {
	p := new(ChainMessageType)
	*p = x
	return p
}

func (x ChainMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChainMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_overlay_proto_enumTypes[1].Descriptor()
}

func (ChainMessageType) Type() protoreflect.EnumType {
	return &file_overlay_proto_enumTypes[1]
}

func (x ChainMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChainMessageType.Descriptor instead.
func (ChainMessageType) EnumDescriptor() ([]byte, []int) {
	return file_overlay_proto_rawDescGZIP(), []int{1}
}

type Ledgers_SyncCode int32

const (
	Ledgers_OK             Ledgers_SyncCode = 0 //Success
	Ledgers_OUT_OF_SYNC    Ledgers_SyncCode = 1 //The node itself is not in sync status
	Ledgers_OUT_OF_LEDGERS Ledgers_SyncCode = 2 //Too many requested ledgers
	Ledgers_BUSY           Ledgers_SyncCode = 3 //This node is occupied
	Ledgers_REFUSE         Ledgers_SyncCode = 4 //The node itself is not allow sync
	Ledgers_INTERNAL       Ledgers_SyncCode = 5 //Inner error
)

// Enum value maps for Ledgers_SyncCode.
var (
	Ledgers_SyncCode_name = map[int32]string{
		0: "OK",
		1: "OUT_OF_SYNC",
		2: "OUT_OF_LEDGERS",
		3: "BUSY",
		4: "REFUSE",
		5: "INTERNAL",
	}
	Ledgers_SyncCode_value = map[string]int32{
		"OK":             0,
		"OUT_OF_SYNC":    1,
		"OUT_OF_LEDGERS": 2,
		"BUSY":           3,
		"REFUSE":         4,
		"INTERNAL":       5,
	}
)

func (x Ledgers_SyncCode) Enum() *Ledgers_SyncCode {
	p := new(Ledgers_SyncCode)
	*p = x
	return p
}

func (x Ledgers_SyncCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ledgers_SyncCode) Descriptor() protoreflect.EnumDescriptor {
	return file_overlay_proto_enumTypes[2].Descriptor()
}

func (Ledgers_SyncCode) Type() protoreflect.EnumType {
	return &file_overlay_proto_enumTypes[2]
}

func (x Ledgers_SyncCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ledgers_SyncCode.Descriptor instead.
func (Ledgers_SyncCode) EnumDescriptor() ([]byte, []int) {
	return file_overlay_proto_rawDescGZIP(), []int{5, 0}
}

type ChainTxStatus_TxStatus int32

const (
	ChainTxStatus_UNDEFINED     ChainTxStatus_TxStatus = 0
	ChainTxStatus_CONFIRMED     ChainTxStatus_TxStatus = 1 // web server will check tx parameters, signatures etc fist, noitfy CONFIRMED if pass
	ChainTxStatus_PENDING       ChainTxStatus_TxStatus = 2 // master will check futher before put it into pending queue
	ChainTxStatus_COMPLETE      ChainTxStatus_TxStatus = 3 // notify if Tx write ledger successfully
	ChainTxStatus_FAILURE       ChainTxStatus_TxStatus = 4 // notify once failed before broadcast and set error_code
	ChainTxStatus_APPLY_FAILURE ChainTxStatus_TxStatus = 5 // notify once failed after apply and set error_code
)

// Enum value maps for ChainTxStatus_TxStatus.
var (
	ChainTxStatus_TxStatus_name = map[int32]string{
		0: "UNDEFINED",
		1: "CONFIRMED",
		2: "PENDING",
		3: "COMPLETE",
		4: "FAILURE",
		5: "APPLY_FAILURE",
	}
	ChainTxStatus_TxStatus_value = map[string]int32{
		"UNDEFINED":     0,
		"CONFIRMED":     1,
		"PENDING":       2,
		"COMPLETE":      3,
		"FAILURE":       4,
		"APPLY_FAILURE": 5,
	}
)

func (x ChainTxStatus_TxStatus) Enum() *ChainTxStatus_TxStatus {
	p := new(ChainTxStatus_TxStatus)
	*p = x
	return p
}

func (x ChainTxStatus_TxStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChainTxStatus_TxStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_overlay_proto_enumTypes[3].Descriptor()
}

func (ChainTxStatus_TxStatus) Type() protoreflect.EnumType {
	return &file_overlay_proto_enumTypes[3]
}

func (x ChainTxStatus_TxStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChainTxStatus_TxStatus.Descriptor instead.
func (ChainTxStatus_TxStatus) EnumDescriptor() ([]byte, []int) {
	return file_overlay_proto_rawDescGZIP(), []int{14, 0}
}

type Hello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkId      int64  `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	LedgerVersion  int64  `protobuf:"varint,2,opt,name=ledger_version,json=ledgerVersion,proto3" json:"ledger_version,omitempty"`
	OverlayVersion int64  `protobuf:"varint,3,opt,name=overlay_version,json=overlayVersion,proto3" json:"overlay_version,omitempty"`
	ChainVersion   string `protobuf:"bytes,4,opt,name=chain_version,json=chainVersion,proto3" json:"chain_version,omitempty"`
	ListeningPort  int64  `protobuf:"varint,5,opt,name=listening_port,json=listeningPort,proto3" json:"listening_port,omitempty"`
	NodeAddress    string `protobuf:"bytes,6,opt,name=node_address,json=nodeAddress,proto3" json:"node_address,omitempty"`
	NodeRand       string `protobuf:"bytes,7,opt,name=node_rand,json=nodeRand,proto3" json:"node_rand,omitempty"`
	License        string `protobuf:"bytes,8,opt,name=license,proto3" json:"license,omitempty"`
}

func (x *Hello) Reset() {
	*x = Hello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_overlay_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hello) ProtoMessage() {}

func (x *Hello) ProtoReflect() protoreflect.Message {
	mi := &file_overlay_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hello.ProtoReflect.Descriptor instead.
func (*Hello) Descriptor() ([]byte, []int) {
	return file_overlay_proto_rawDescGZIP(), []int{0}
}

func (x *Hello) GetNetworkId() int64 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

func (x *Hello) GetLedgerVersion() int64 {
	if x != nil {
		return x.LedgerVersion
	}
	return 0
}

func (x *Hello) GetOverlayVersion() int64 {
	if x != nil {
		return x.OverlayVersion
	}
	return 0
}

func (x *Hello) GetChainVersion() string {
	if x != nil {
		return x.ChainVersion
	}
	return ""
}

func (x *Hello) GetListeningPort() int64 {
	if x != nil {
		return x.ListeningPort
	}
	return 0
}

func (x *Hello) GetNodeAddress() string {
	if x != nil {
		return x.NodeAddress
	}
	return ""
}

func (x *Hello) GetNodeRand() string {
	if x != nil {
		return x.NodeRand
	}
	return ""
}

func (x *Hello) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

type HelloResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode ERRORCODE `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=protocol.ERRORCODE" json:"error_code,omitempty"`
	ErrorDesc string    `protobuf:"bytes,2,opt,name=error_desc,json=errorDesc,proto3" json:"error_desc,omitempty"`
}

func (x *HelloResponse) Reset() {
	*x = HelloResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_overlay_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloResponse) ProtoMessage() {}

func (x *HelloResponse) ProtoReflect() protoreflect.Message {
	mi := &file_overlay_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloResponse.ProtoReflect.Descriptor instead.
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return file_overlay_proto_rawDescGZIP(), []int{1}
}

func (x *HelloResponse) GetErrorCode() ERRORCODE {
	if x != nil {
		return x.ErrorCode
	}
	return ERRORCODE_ERRCODE_SUCCESS
}

func (x *HelloResponse) GetErrorDesc() string {
	if x != nil {
		return x.ErrorDesc
	}
	return ""
}

//for peers message
type Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip              string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port            int64  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	NumFailures     int64  `protobuf:"varint,3,opt,name=num_failures,json=numFailures,proto3" json:"num_failures,omitempty"`
	NextAttemptTime int64  `protobuf:"varint,4,opt,name=next_attempt_time,json=nextAttemptTime,proto3" json:"next_attempt_time,omitempty"`
	ActiveTime      int64  `protobuf:"varint,5,opt,name=active_time,json=activeTime,proto3" json:"active_time,omitempty"`
	ConnectionId    int64  `protobuf:"varint,6,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (x *Peer) Reset() {
	*x = Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_overlay_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_overlay_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_overlay_proto_rawDescGZIP(), []int{2}
}

func (x *Peer) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Peer) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Peer) GetNumFailures() int64 {
	if x != nil {
		return x.NumFailures
	}
	return 0
}

func (x *Peer) GetNextAttemptTime() int64 {
	if x != nil {
		return x.NextAttemptTime
	}
	return 0
}

func (x *Peer) GetActiveTime() int64 {
	if x != nil {
		return x.ActiveTime
	}
	return 0
}

func (x *Peer) GetConnectionId() int64 {
	if x != nil {
		return x.ConnectionId
	}
	return 0
}

type Peers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peers []*Peer `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *Peers) Reset() {
	*x = Peers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_overlay_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peers) ProtoMessage() {}

func (x *Peers) ProtoReflect() protoreflect.Message {
	mi := &file_overlay_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peers.ProtoReflect.Descriptor instead.
func (*Peers) Descriptor() ([]byte, []int) {
	return file_overlay_proto_rawDescGZIP(), []int{3}
}

func (x *Peers) GetPeers() []*Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

//for getledgers
type GetLedgers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Begin     int64 `protobuf:"varint,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End       int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ChainId   int64 `protobuf:"varint,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *GetLedgers) Reset() {
	*x = GetLedgers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_overlay_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLedgers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLedgers) ProtoMessage() {}

func (x *GetLedgers) ProtoReflect() protoreflect.Message {
	mi := &file_overlay_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLedgers.ProtoReflect.Descriptor instead.
func (*GetLedgers) Descriptor() ([]byte, []int) {
	return file_overlay_proto_rawDescGZIP(), []int{4}
}

func (x *GetLedgers) GetBegin() int64 {
	if x != nil {
		return x.Begin
	}
	return 0
}

func (x *GetLedgers) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *GetLedgers) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GetLedgers) GetChainId() int64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

//for ledgers
type Ledgers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values   []*ConsensusValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	SyncCode Ledgers_SyncCode  `protobuf:"varint,2,opt,name=sync_code,json=syncCode,proto3,enum=protocol.Ledgers_SyncCode" json:"sync_code,omitempty"`
	MaxSeq   int64             `protobuf:"varint,3,opt,name=max_seq,json=maxSeq,proto3" json:"max_seq,omitempty"`
	Proof    []byte            `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
	ChainId  int64             `protobuf:"varint,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *Ledgers) Reset() {
	*x = Ledgers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_overlay_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ledgers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ledgers) ProtoMessage() {}

func (x *Ledgers) ProtoReflect() protoreflect.Message {
	mi := &file_overlay_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ledgers.ProtoReflect.Descriptor instead.
func (*Ledgers) Descriptor() ([]byte, []int) {
	return file_overlay_proto_rawDescGZIP(), []int{5}
}

func (x *Ledgers) GetValues() []*ConsensusValue {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Ledgers) GetSyncCode() Ledgers_SyncCode {
	if x != nil {
		return x.SyncCode
	}
	return Ledgers_OK
}

func (x *Ledgers) GetMaxSeq() int64 {
	if x != nil {
		return x.MaxSeq
	}
	return 0
}

func (x *Ledgers) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *Ledgers) GetChainId() int64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

//for dont have
type DontHave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int64  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *DontHave) Reset() {
	*x = DontHave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_overlay_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DontHave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DontHave) ProtoMessage() {}

func (x *DontHave) ProtoReflect() protoreflect.Message {
	mi := &file_overlay_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DontHave.ProtoReflect.Descriptor instead.
func (*DontHave) Descriptor() ([]byte, []int) {
	return file_overlay_proto_rawDescGZIP(), []int{6}
}

func (x *DontHave) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DontHave) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

//for ledger upgrade
type LedgerUpgradeNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce     int64          `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"` //for broadcast
	Upgrade   *LedgerUpgrade `protobuf:"bytes,2,opt,name=upgrade,proto3" json:"upgrade,omitempty"`
	Signature *Signature     `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"` //consensus sig
}

func (x *LedgerUpgradeNotify) Reset() {
	*x = LedgerUpgradeNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_overlay_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedgerUpgradeNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerUpgradeNotify) ProtoMessage() {}

func (x *LedgerUpgradeNotify) ProtoReflect() protoreflect.Message {
	mi := &file_overlay_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerUpgradeNotify.ProtoReflect.Descriptor instead.
func (*LedgerUpgradeNotify) Descriptor() ([]byte, []int) {
	return file_overlay_proto_rawDescGZIP(), []int{7}
}

func (x *LedgerUpgradeNotify) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *LedgerUpgradeNotify) GetUpgrade() *LedgerUpgrade {
	if x != nil {
		return x.Upgrade
	}
	return nil
}

func (x *LedgerUpgradeNotify) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

//for key value db storage
type EntryList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry [][]byte `protobuf:"bytes,1,rep,name=entry,proto3" json:"entry,omitempty"`
}

func (x *EntryList) Reset() {
	*x = EntryList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_overlay_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntryList) ProtoMessage() {}

func (x *EntryList) ProtoReflect() protoreflect.Message {
	mi := &file_overlay_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntryList.ProtoReflect.Descriptor instead.
func (*EntryList) Descriptor() ([]byte, []int) {
	return file_overlay_proto_rawDescGZIP(), []int{8}
}

func (x *EntryList) GetEntry() [][]byte {
	if x != nil {
		return x.Entry
	}
	return nil
}

//Register notification events
type ChainHello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiList   []ChainMessageType `protobuf:"varint,1,rep,packed,name=api_list,json=apiList,proto3,enum=protocol.ChainMessageType" json:"api_list,omitempty"` //By default, enable all apis
	Timestamp int64              `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ChainHello) Reset() {
	*x = ChainHello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_overlay_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainHello) ProtoMessage() {}

func (x *ChainHello) ProtoReflect() protoreflect.Message {
	mi := &file_overlay_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainHello.ProtoReflect.Descriptor instead.
func (*ChainHello) Descriptor() ([]byte, []int) {
	return file_overlay_proto_rawDescGZIP(), []int{9}
}

func (x *ChainHello) GetApiList() []ChainMessageType {
	if x != nil {
		return x.ApiList
	}
	return nil
}

func (x *ChainHello) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

//1.ChainHello response
//2.async notification from local
type ChainStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfAddr       string `protobuf:"bytes,1,opt,name=self_addr,json=selfAddr,proto3" json:"self_addr,omitempty"`
	LedgerVersion  int64  `protobuf:"varint,2,opt,name=ledger_version,json=ledgerVersion,proto3" json:"ledger_version,omitempty"`
	MonitorVersion int64  `protobuf:"varint,3,opt,name=monitor_version,json=monitorVersion,proto3" json:"monitor_version,omitempty"`
	ChainVersion   string `protobuf:"bytes,4,opt,name=chain_version,json=chainVersion,proto3" json:"chain_version,omitempty"`
	Timestamp      int64  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	NetworkId      int64  `protobuf:"varint,6,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	ChainCode      string `protobuf:"bytes,7,opt,name=chain_code,json=chainCode,proto3" json:"chain_code,omitempty"`
	AddressPrefix  string `protobuf:"bytes,8,opt,name=address_prefix,json=addressPrefix,proto3" json:"address_prefix,omitempty"`
}

func (x *ChainStatus) Reset() {
	*x = ChainStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_overlay_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainStatus) ProtoMessage() {}

func (x *ChainStatus) ProtoReflect() protoreflect.Message {
	mi := &file_overlay_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainStatus.ProtoReflect.Descriptor instead.
func (*ChainStatus) Descriptor() ([]byte, []int) {
	return file_overlay_proto_rawDescGZIP(), []int{10}
}

func (x *ChainStatus) GetSelfAddr() string {
	if x != nil {
		return x.SelfAddr
	}
	return ""
}

func (x *ChainStatus) GetLedgerVersion() int64 {
	if x != nil {
		return x.LedgerVersion
	}
	return 0
}

func (x *ChainStatus) GetMonitorVersion() int64 {
	if x != nil {
		return x.MonitorVersion
	}
	return 0
}

func (x *ChainStatus) GetChainVersion() string {
	if x != nil {
		return x.ChainVersion
	}
	return ""
}

func (x *ChainStatus) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ChainStatus) GetNetworkId() int64 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

func (x *ChainStatus) GetChainCode() string {
	if x != nil {
		return x.ChainCode
	}
	return ""
}

func (x *ChainStatus) GetAddressPrefix() string {
	if x != nil {
		return x.AddressPrefix
	}
	return ""
}

type ChainPeerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcPeerAddr  string   `protobuf:"bytes,1,opt,name=src_peer_addr,json=srcPeerAddr,proto3" json:"src_peer_addr,omitempty"`
	DesPeerAddrs []string `protobuf:"bytes,2,rep,name=des_peer_addrs,json=desPeerAddrs,proto3" json:"des_peer_addrs,omitempty"`
	Data         []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ChainPeerMessage) Reset() {
	*x = ChainPeerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_overlay_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainPeerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainPeerMessage) ProtoMessage() {}

func (x *ChainPeerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_overlay_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainPeerMessage.ProtoReflect.Descriptor instead.
func (*ChainPeerMessage) Descriptor() ([]byte, []int) {
	return file_overlay_proto_rawDescGZIP(), []int{11}
}

func (x *ChainPeerMessage) GetSrcPeerAddr() string {
	if x != nil {
		return x.SrcPeerAddr
	}
	return ""
}

func (x *ChainPeerMessage) GetDesPeerAddrs() []string {
	if x != nil {
		return x.DesPeerAddrs
	}
	return nil
}

func (x *ChainPeerMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ChainSubscribeTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []string `protobuf:"bytes,1,rep,name=address,proto3" json:"address,omitempty"`
}

func (x *ChainSubscribeTx) Reset() {
	*x = ChainSubscribeTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_overlay_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainSubscribeTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainSubscribeTx) ProtoMessage() {}

func (x *ChainSubscribeTx) ProtoReflect() protoreflect.Message {
	mi := &file_overlay_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainSubscribeTx.ProtoReflect.Descriptor instead.
func (*ChainSubscribeTx) Descriptor() ([]byte, []int) {
	return file_overlay_proto_rawDescGZIP(), []int{12}
}

func (x *ChainSubscribeTx) GetAddress() []string {
	if x != nil {
		return x.Address
	}
	return nil
}

type ChainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32  `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorDesc string `protobuf:"bytes,2,opt,name=error_desc,json=errorDesc,proto3" json:"error_desc,omitempty"`
}

func (x *ChainResponse) Reset() {
	*x = ChainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_overlay_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainResponse) ProtoMessage() {}

func (x *ChainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_overlay_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainResponse.ProtoReflect.Descriptor instead.
func (*ChainResponse) Descriptor() ([]byte, []int) {
	return file_overlay_proto_rawDescGZIP(), []int{13}
}

func (x *ChainResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *ChainResponse) GetErrorDesc() string {
	if x != nil {
		return x.ErrorDesc
	}
	return ""
}

type ChainTxStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           ChainTxStatus_TxStatus `protobuf:"varint,1,opt,name=status,proto3,enum=protocol.ChainTxStatus_TxStatus" json:"status,omitempty"`
	TxHash           string                 `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	SourceAddress    string                 `protobuf:"bytes,3,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	SourceAccountSeq int64                  `protobuf:"varint,4,opt,name=source_account_seq,json=sourceAccountSeq,proto3" json:"source_account_seq,omitempty"`
	LedgerSeq        int64                  `protobuf:"varint,5,opt,name=ledger_seq,json=ledgerSeq,proto3" json:"ledger_seq,omitempty"`                         //on which block this tx records
	NewAccountSeq    int64                  `protobuf:"varint,6,opt,name=new_account_seq,json=newAccountSeq,proto3" json:"new_account_seq,omitempty"`           //new account sequence if COMPLETE
	ErrorCode        ERRORCODE              `protobuf:"varint,7,opt,name=error_code,json=errorCode,proto3,enum=protocol.ERRORCODE" json:"error_code,omitempty"` //use it if FAIL
	ErrorDesc        string                 `protobuf:"bytes,8,opt,name=error_desc,json=errorDesc,proto3" json:"error_desc,omitempty"`                          //error desc
	Timestamp        int64                  `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ChainTxStatus) Reset() {
	*x = ChainTxStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_overlay_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainTxStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainTxStatus) ProtoMessage() {}

func (x *ChainTxStatus) ProtoReflect() protoreflect.Message {
	mi := &file_overlay_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainTxStatus.ProtoReflect.Descriptor instead.
func (*ChainTxStatus) Descriptor() ([]byte, []int) {
	return file_overlay_proto_rawDescGZIP(), []int{14}
}

func (x *ChainTxStatus) GetStatus() ChainTxStatus_TxStatus {
	if x != nil {
		return x.Status
	}
	return ChainTxStatus_UNDEFINED
}

func (x *ChainTxStatus) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *ChainTxStatus) GetSourceAddress() string {
	if x != nil {
		return x.SourceAddress
	}
	return ""
}

func (x *ChainTxStatus) GetSourceAccountSeq() int64 {
	if x != nil {
		return x.SourceAccountSeq
	}
	return 0
}

func (x *ChainTxStatus) GetLedgerSeq() int64 {
	if x != nil {
		return x.LedgerSeq
	}
	return 0
}

func (x *ChainTxStatus) GetNewAccountSeq() int64 {
	if x != nil {
		return x.NewAccountSeq
	}
	return 0
}

func (x *ChainTxStatus) GetErrorCode() ERRORCODE {
	if x != nil {
		return x.ErrorCode
	}
	return ERRORCODE_ERRCODE_SUCCESS
}

func (x *ChainTxStatus) GetErrorDesc() string {
	if x != nil {
		return x.ErrorDesc
	}
	return ""
}

func (x *ChainTxStatus) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type TransactionEnvResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TranEnv          *TransactionEnv `protobuf:"bytes,1,opt,name=tran_env,json=tranEnv,proto3" json:"tran_env,omitempty"`
	TxHash           string          `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	ErrorCode        ERRORCODE       `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3,enum=protocol.ERRORCODE" json:"error_code,omitempty"`
	ErrorDesc        string          `protobuf:"bytes,4,opt,name=error_desc,json=errorDesc,proto3" json:"error_desc,omitempty"`
	LedgerSeq        int64           `protobuf:"varint,5,opt,name=ledger_seq,json=ledgerSeq,proto3" json:"ledger_seq,omitempty"`
	CloseTime        int64           `protobuf:"varint,6,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`
	ActualFee        int64           `protobuf:"varint,7,opt,name=actual_fee,json=actualFee,proto3" json:"actual_fee,omitempty"`
	ContractTxHashes [][]byte        `protobuf:"bytes,8,rep,name=contract_tx_hashes,json=contractTxHashes,proto3" json:"contract_tx_hashes,omitempty"`
}

func (x *TransactionEnvResult) Reset() {
	*x = TransactionEnvResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_overlay_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionEnvResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionEnvResult) ProtoMessage() {}

func (x *TransactionEnvResult) ProtoReflect() protoreflect.Message {
	mi := &file_overlay_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionEnvResult.ProtoReflect.Descriptor instead.
func (*TransactionEnvResult) Descriptor() ([]byte, []int) {
	return file_overlay_proto_rawDescGZIP(), []int{15}
}

func (x *TransactionEnvResult) GetTranEnv() *TransactionEnv {
	if x != nil {
		return x.TranEnv
	}
	return nil
}

func (x *TransactionEnvResult) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *TransactionEnvResult) GetErrorCode() ERRORCODE {
	if x != nil {
		return x.ErrorCode
	}
	return ERRORCODE_ERRCODE_SUCCESS
}

func (x *TransactionEnvResult) GetErrorDesc() string {
	if x != nil {
		return x.ErrorDesc
	}
	return ""
}

func (x *TransactionEnvResult) GetLedgerSeq() int64 {
	if x != nil {
		return x.LedgerSeq
	}
	return 0
}

func (x *TransactionEnvResult) GetCloseTime() int64 {
	if x != nil {
		return x.CloseTime
	}
	return 0
}

func (x *TransactionEnvResult) GetActualFee() int64 {
	if x != nil {
		return x.ActualFee
	}
	return 0
}

func (x *TransactionEnvResult) GetContractTxHashes() [][]byte {
	if x != nil {
		return x.ContractTxHashes
	}
	return nil
}

type LedgerTxs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *LedgerHeader           `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Txs          []*TransactionEnvResult `protobuf:"bytes,2,rep,name=txs,proto3" json:"txs,omitempty"`
	LedgerLength int64                   `protobuf:"varint,3,opt,name=ledger_length,json=ledgerLength,proto3" json:"ledger_length,omitempty"`
}

func (x *LedgerTxs) Reset() {
	*x = LedgerTxs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_overlay_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedgerTxs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerTxs) ProtoMessage() {}

func (x *LedgerTxs) ProtoReflect() protoreflect.Message {
	mi := &file_overlay_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerTxs.ProtoReflect.Descriptor instead.
func (*LedgerTxs) Descriptor() ([]byte, []int) {
	return file_overlay_proto_rawDescGZIP(), []int{16}
}

func (x *LedgerTxs) GetHeader() *LedgerHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LedgerTxs) GetTxs() []*TransactionEnvResult {
	if x != nil {
		return x.Txs
	}
	return nil
}

func (x *LedgerTxs) GetLedgerLength() int64 {
	if x != nil {
		return x.LedgerLength
	}
	return 0
}

type ChainContractLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender    string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Data      string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ChainContractLog) Reset() {
	*x = ChainContractLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_overlay_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainContractLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainContractLog) ProtoMessage() {}

func (x *ChainContractLog) ProtoReflect() protoreflect.Message {
	mi := &file_overlay_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainContractLog.ProtoReflect.Descriptor instead.
func (*ChainContractLog) Descriptor() ([]byte, []int) {
	return file_overlay_proto_rawDescGZIP(), []int{17}
}

func (x *ChainContractLog) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *ChainContractLog) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ChainContractLog) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

var File_overlay_proto protoreflect.FileDescriptor

var file_overlay_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x02, 0x0a, 0x05, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f,
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x22, 0x62, 0x0a, 0x0d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x22, 0xbf, 0x01, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x05, 0x50, 0x65, 0x65,
	0x72, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x22, 0x6d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x9b, 0x02, 0x0a, 0x07, 0x4c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x08, 0x53, 0x79, 0x6e, 0x63,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x52, 0x53, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x55, 0x53, 0x59, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x52,
	0x45, 0x46, 0x55, 0x53, 0x45, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x10, 0x05, 0x22, 0x32, 0x0a, 0x08, 0x44, 0x6f, 0x6e, 0x74, 0x48, 0x61, 0x76,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x91, 0x01, 0x0a, 0x13, 0x4c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x07, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x21, 0x0a,
	0x09, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x22, 0x61, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x35,
	0x0a, 0x08, 0x61, 0x70, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x61, 0x70,
	0x69, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0xa2, 0x02, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x70, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x73, 0x72, 0x63, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x50, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x24, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x50, 0x65, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2c, 0x0a, 0x10, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x78, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4d, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x22, 0xd4, 0x03, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x71, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x53, 0x65, 0x71,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44,
	0x45, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x63, 0x0a, 0x08, 0x54, 0x78, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x41,
	0x50, 0x50, 0x4c, 0x59, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x05, 0x22, 0xc2,
	0x02, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x76, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x5f,
	0x65, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x76, 0x52, 0x07, 0x74, 0x72, 0x61, 0x6e, 0x45, 0x6e, 0x76, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x32, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x53, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x46, 0x65, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x09, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x54, 0x78,
	0x73, 0x12, 0x2e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x30, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x03,
	0x74, 0x78, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x5c, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2a, 0x83, 0x02, 0x0a, 0x14, 0x4f, 0x56, 0x45, 0x52, 0x4c,
	0x41, 0x59, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x18, 0x0a, 0x14, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x59, 0x5f, 0x4d, 0x53, 0x47, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x56, 0x45,
	0x52, 0x4c, 0x41, 0x59, 0x5f, 0x4d, 0x53, 0x47, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x59, 0x5f, 0x4d,
	0x53, 0x47, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x59, 0x5f, 0x4d, 0x53, 0x47, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x53, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x56, 0x45,
	0x52, 0x4c, 0x41, 0x59, 0x5f, 0x4d, 0x53, 0x47, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x56,
	0x45, 0x52, 0x4c, 0x41, 0x59, 0x5f, 0x4d, 0x53, 0x47, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45,
	0x44, 0x47, 0x45, 0x52, 0x53, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x56, 0x45, 0x52, 0x4c,
	0x41, 0x59, 0x5f, 0x4d, 0x53, 0x47, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x42, 0x46, 0x54, 0x10,
	0x06, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x59, 0x5f, 0x4d, 0x53, 0x47,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x47, 0x52,
	0x41, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x07, 0x2a, 0xa8, 0x02, 0x0a,
	0x10, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f,
	0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x49, 0x4e,
	0x5f, 0x54, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e,
	0x45, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x45, 0x45,
	0x52, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x48, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x10, 0x0e, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x55, 0x42,
	0x4d, 0x49, 0x54, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x52,
	0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x41,
	0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x10,
	0x11, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x4c, 0x45, 0x44, 0x47, 0x45,
	0x52, 0x5f, 0x54, 0x58, 0x53, 0x10, 0x12, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x41, 0x49, 0x4e,
	0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x54, 0x58, 0x10, 0x13, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x58, 0x5f, 0x45, 0x4e, 0x56, 0x5f,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x14, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_overlay_proto_rawDescOnce sync.Once
	file_overlay_proto_rawDescData = file_overlay_proto_rawDesc
)

func file_overlay_proto_rawDescGZIP() []byte {
	file_overlay_proto_rawDescOnce.Do(func() {
		file_overlay_proto_rawDescData = protoimpl.X.CompressGZIP(file_overlay_proto_rawDescData)
	})
	return file_overlay_proto_rawDescData
}

var file_overlay_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_overlay_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_overlay_proto_goTypes = []interface{}{
	(OVERLAY_MESSAGE_TYPE)(0),    // 0: protocol.OVERLAY_MESSAGE_TYPE
	(ChainMessageType)(0),        // 1: protocol.ChainMessageType
	(Ledgers_SyncCode)(0),        // 2: protocol.Ledgers.SyncCode
	(ChainTxStatus_TxStatus)(0),  // 3: protocol.ChainTxStatus.TxStatus
	(*Hello)(nil),                // 4: protocol.Hello
	(*HelloResponse)(nil),        // 5: protocol.HelloResponse
	(*Peer)(nil),                 // 6: protocol.Peer
	(*Peers)(nil),                // 7: protocol.Peers
	(*GetLedgers)(nil),           // 8: protocol.GetLedgers
	(*Ledgers)(nil),              // 9: protocol.Ledgers
	(*DontHave)(nil),             // 10: protocol.DontHave
	(*LedgerUpgradeNotify)(nil),  // 11: protocol.LedgerUpgradeNotify
	(*EntryList)(nil),            // 12: protocol.EntryList
	(*ChainHello)(nil),           // 13: protocol.ChainHello
	(*ChainStatus)(nil),          // 14: protocol.ChainStatus
	(*ChainPeerMessage)(nil),     // 15: protocol.ChainPeerMessage
	(*ChainSubscribeTx)(nil),     // 16: protocol.ChainSubscribeTx
	(*ChainResponse)(nil),        // 17: protocol.ChainResponse
	(*ChainTxStatus)(nil),        // 18: protocol.ChainTxStatus
	(*TransactionEnvResult)(nil), // 19: protocol.TransactionEnvResult
	(*LedgerTxs)(nil),            // 20: protocol.LedgerTxs
	(*ChainContractLog)(nil),     // 21: protocol.ChainContractLog
	(ERRORCODE)(0),               // 22: protocol.ERRORCODE
	(*ConsensusValue)(nil),       // 23: protocol.ConsensusValue
	(*LedgerUpgrade)(nil),        // 24: protocol.LedgerUpgrade
	(*Signature)(nil),            // 25: protocol.Signature
	(*TransactionEnv)(nil),       // 26: protocol.TransactionEnv
	(*LedgerHeader)(nil),         // 27: protocol.LedgerHeader
}
var file_overlay_proto_depIdxs = []int32{
	22, // 0: protocol.HelloResponse.error_code:type_name -> protocol.ERRORCODE
	6,  // 1: protocol.Peers.peers:type_name -> protocol.Peer
	23, // 2: protocol.Ledgers.values:type_name -> protocol.ConsensusValue
	2,  // 3: protocol.Ledgers.sync_code:type_name -> protocol.Ledgers.SyncCode
	24, // 4: protocol.LedgerUpgradeNotify.upgrade:type_name -> protocol.LedgerUpgrade
	25, // 5: protocol.LedgerUpgradeNotify.signature:type_name -> protocol.Signature
	1,  // 6: protocol.ChainHello.api_list:type_name -> protocol.ChainMessageType
	3,  // 7: protocol.ChainTxStatus.status:type_name -> protocol.ChainTxStatus.TxStatus
	22, // 8: protocol.ChainTxStatus.error_code:type_name -> protocol.ERRORCODE
	26, // 9: protocol.TransactionEnvResult.tran_env:type_name -> protocol.TransactionEnv
	22, // 10: protocol.TransactionEnvResult.error_code:type_name -> protocol.ERRORCODE
	27, // 11: protocol.LedgerTxs.header:type_name -> protocol.LedgerHeader
	19, // 12: protocol.LedgerTxs.txs:type_name -> protocol.TransactionEnvResult
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_overlay_proto_init() }
func file_overlay_proto_init() {
	if File_overlay_proto != nil {
		return
	}
	file_common_proto_init()
	file_chain_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_overlay_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_overlay_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_overlay_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_overlay_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Peers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_overlay_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLedgers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_overlay_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ledgers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_overlay_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DontHave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_overlay_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedgerUpgradeNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_overlay_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntryList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_overlay_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainHello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_overlay_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_overlay_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainPeerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_overlay_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainSubscribeTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_overlay_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_overlay_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainTxStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_overlay_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionEnvResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_overlay_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedgerTxs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_overlay_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainContractLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_overlay_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_overlay_proto_goTypes,
		DependencyIndexes: file_overlay_proto_depIdxs,
		EnumInfos:         file_overlay_proto_enumTypes,
		MessageInfos:      file_overlay_proto_msgTypes,
	}.Build()
	File_overlay_proto = out.File
	file_overlay_proto_rawDesc = nil
	file_overlay_proto_goTypes = nil
	file_overlay_proto_depIdxs = nil
}
