// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: common.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ERRORCODE int32

const (
	ERRORCODE_ERRCODE_SUCCESS                        ERRORCODE = 0
	ERRORCODE_ERRCODE_INTERNAL_ERROR                 ERRORCODE = 1
	ERRORCODE_ERRCODE_INVALID_PARAMETER              ERRORCODE = 2
	ERRORCODE_ERRCODE_ALREADY_EXIST                  ERRORCODE = 3
	ERRORCODE_ERRCODE_NOT_EXIST                      ERRORCODE = 4
	ERRORCODE_ERRCODE_TX_TIMEOUT                     ERRORCODE = 5
	ERRORCODE_ERRCODE_ACCESS_DENIED                  ERRORCODE = 6
	ERRORCODE_ERRCODE_MATH_OVERFLOW                  ERRORCODE = 7
	ERRORCODE_ERRCODE_EXPR_CONDITION_RESULT_FALSE    ERRORCODE = 20
	ERRORCODE_ERRCODE_EXPR_CONDITION_SYNTAX_ERROR    ERRORCODE = 21
	ERRORCODE_ERRCODE_INVALID_PUBKEY                 ERRORCODE = 90 // UNUSED
	ERRORCODE_ERRCODE_INVALID_PRIKEY                 ERRORCODE = 91
	ERRORCODE_ERRCODE_ASSET_INVALID                  ERRORCODE = 92
	ERRORCODE_ERRCODE_INVALID_SIGNATURE              ERRORCODE = 93
	ERRORCODE_ERRCODE_INVALID_ADDRESS                ERRORCODE = 94
	ERRORCODE_ERRCODE_MISSING_OPERATIONS             ERRORCODE = 97
	ERRORCODE_ERRCODE_TOO_MANY_OPERATIONS            ERRORCODE = 98
	ERRORCODE_ERRCODE_BAD_SEQUENCE                   ERRORCODE = 99
	ERRORCODE_ERRCODE_ACCOUNT_LOW_RESERVE            ERRORCODE = 100 //BUCHAIN LOW RESERVE
	ERRORCODE_ERRCODE_ACCOUNT_SOURCEDEST_EQUAL       ERRORCODE = 101
	ERRORCODE_ERRCODE_ACCOUNT_DEST_EXIST             ERRORCODE = 102
	ERRORCODE_ERRCODE_ACCOUNT_NOT_EXIST              ERRORCODE = 103
	ERRORCODE_ERRCODE_ACCOUNT_ASSET_LOW_RESERVE      ERRORCODE = 104 //IOU LOW RESERVE
	ERRORCODE_ERRCODE_ACCOUNT_ASSET_AMOUNT_TOO_LARGE ERRORCODE = 105
	ERRORCODE_ERRCODE_ACCOUNT_INIT_LOW_RESERVE       ERRORCODE = 106
	ERRORCODE_ERRCODE_FEE_NOT_ENOUGH                 ERRORCODE = 111
	ERRORCODE_ERRCODE_FEE_INVALID                    ERRORCODE = 112
	ERRORCODE_ERRCODE_OUT_OF_TXCACHE                 ERRORCODE = 114
	ERRORCODE_ERRCODE_WEIGHT_NOT_VALID               ERRORCODE = 120
	ERRORCODE_ERRCODE_THRESHOLD_NOT_VALID            ERRORCODE = 121
	ERRORCODE_ERRCODE_INVALID_DATAVERSION            ERRORCODE = 144 //metadata version error
	ERRORCODE_ERRCODE_TX_SIZE_TOO_BIG                ERRORCODE = 146
	ERRORCODE_ERRCODE_CONTRACT_EXECUTE_FAIL          ERRORCODE = 151
	ERRORCODE_ERRCODE_CONTRACT_SYNTAX_ERROR          ERRORCODE = 152
	ERRORCODE_ERRCODE_CONTRACT_TOO_MANY_RECURSION    ERRORCODE = 153
	ERRORCODE_ERRCODE_CONTRACT_TOO_MANY_TRANSACTIONS ERRORCODE = 154
	ERRORCODE_ERRCODE_CONTRACT_EXECUTE_EXPIRED       ERRORCODE = 155
	ERRORCODE_ERRCODE_INVALID_CONTRACT               ERRORCODE = 156
	ERRORCODE_ERRCODE_INVALID_CONTRACTVERSION        ERRORCODE = 157 //contract version error
	ERRORCODE_ERRCODE_TX_INSERT_QUEUE_FAIL           ERRORCODE = 160
)

// Enum value maps for ERRORCODE.
var (
	ERRORCODE_name = map[int32]string{
		0:   "ERRCODE_SUCCESS",
		1:   "ERRCODE_INTERNAL_ERROR",
		2:   "ERRCODE_INVALID_PARAMETER",
		3:   "ERRCODE_ALREADY_EXIST",
		4:   "ERRCODE_NOT_EXIST",
		5:   "ERRCODE_TX_TIMEOUT",
		6:   "ERRCODE_ACCESS_DENIED",
		7:   "ERRCODE_MATH_OVERFLOW",
		20:  "ERRCODE_EXPR_CONDITION_RESULT_FALSE",
		21:  "ERRCODE_EXPR_CONDITION_SYNTAX_ERROR",
		90:  "ERRCODE_INVALID_PUBKEY",
		91:  "ERRCODE_INVALID_PRIKEY",
		92:  "ERRCODE_ASSET_INVALID",
		93:  "ERRCODE_INVALID_SIGNATURE",
		94:  "ERRCODE_INVALID_ADDRESS",
		97:  "ERRCODE_MISSING_OPERATIONS",
		98:  "ERRCODE_TOO_MANY_OPERATIONS",
		99:  "ERRCODE_BAD_SEQUENCE",
		100: "ERRCODE_ACCOUNT_LOW_RESERVE",
		101: "ERRCODE_ACCOUNT_SOURCEDEST_EQUAL",
		102: "ERRCODE_ACCOUNT_DEST_EXIST",
		103: "ERRCODE_ACCOUNT_NOT_EXIST",
		104: "ERRCODE_ACCOUNT_ASSET_LOW_RESERVE",
		105: "ERRCODE_ACCOUNT_ASSET_AMOUNT_TOO_LARGE",
		106: "ERRCODE_ACCOUNT_INIT_LOW_RESERVE",
		111: "ERRCODE_FEE_NOT_ENOUGH",
		112: "ERRCODE_FEE_INVALID",
		114: "ERRCODE_OUT_OF_TXCACHE",
		120: "ERRCODE_WEIGHT_NOT_VALID",
		121: "ERRCODE_THRESHOLD_NOT_VALID",
		144: "ERRCODE_INVALID_DATAVERSION",
		146: "ERRCODE_TX_SIZE_TOO_BIG",
		151: "ERRCODE_CONTRACT_EXECUTE_FAIL",
		152: "ERRCODE_CONTRACT_SYNTAX_ERROR",
		153: "ERRCODE_CONTRACT_TOO_MANY_RECURSION",
		154: "ERRCODE_CONTRACT_TOO_MANY_TRANSACTIONS",
		155: "ERRCODE_CONTRACT_EXECUTE_EXPIRED",
		156: "ERRCODE_INVALID_CONTRACT",
		157: "ERRCODE_INVALID_CONTRACTVERSION",
		160: "ERRCODE_TX_INSERT_QUEUE_FAIL",
	}
	ERRORCODE_value = map[string]int32{
		"ERRCODE_SUCCESS":                        0,
		"ERRCODE_INTERNAL_ERROR":                 1,
		"ERRCODE_INVALID_PARAMETER":              2,
		"ERRCODE_ALREADY_EXIST":                  3,
		"ERRCODE_NOT_EXIST":                      4,
		"ERRCODE_TX_TIMEOUT":                     5,
		"ERRCODE_ACCESS_DENIED":                  6,
		"ERRCODE_MATH_OVERFLOW":                  7,
		"ERRCODE_EXPR_CONDITION_RESULT_FALSE":    20,
		"ERRCODE_EXPR_CONDITION_SYNTAX_ERROR":    21,
		"ERRCODE_INVALID_PUBKEY":                 90,
		"ERRCODE_INVALID_PRIKEY":                 91,
		"ERRCODE_ASSET_INVALID":                  92,
		"ERRCODE_INVALID_SIGNATURE":              93,
		"ERRCODE_INVALID_ADDRESS":                94,
		"ERRCODE_MISSING_OPERATIONS":             97,
		"ERRCODE_TOO_MANY_OPERATIONS":            98,
		"ERRCODE_BAD_SEQUENCE":                   99,
		"ERRCODE_ACCOUNT_LOW_RESERVE":            100,
		"ERRCODE_ACCOUNT_SOURCEDEST_EQUAL":       101,
		"ERRCODE_ACCOUNT_DEST_EXIST":             102,
		"ERRCODE_ACCOUNT_NOT_EXIST":              103,
		"ERRCODE_ACCOUNT_ASSET_LOW_RESERVE":      104,
		"ERRCODE_ACCOUNT_ASSET_AMOUNT_TOO_LARGE": 105,
		"ERRCODE_ACCOUNT_INIT_LOW_RESERVE":       106,
		"ERRCODE_FEE_NOT_ENOUGH":                 111,
		"ERRCODE_FEE_INVALID":                    112,
		"ERRCODE_OUT_OF_TXCACHE":                 114,
		"ERRCODE_WEIGHT_NOT_VALID":               120,
		"ERRCODE_THRESHOLD_NOT_VALID":            121,
		"ERRCODE_INVALID_DATAVERSION":            144,
		"ERRCODE_TX_SIZE_TOO_BIG":                146,
		"ERRCODE_CONTRACT_EXECUTE_FAIL":          151,
		"ERRCODE_CONTRACT_SYNTAX_ERROR":          152,
		"ERRCODE_CONTRACT_TOO_MANY_RECURSION":    153,
		"ERRCODE_CONTRACT_TOO_MANY_TRANSACTIONS": 154,
		"ERRCODE_CONTRACT_EXECUTE_EXPIRED":       155,
		"ERRCODE_INVALID_CONTRACT":               156,
		"ERRCODE_INVALID_CONTRACTVERSION":        157,
		"ERRCODE_TX_INSERT_QUEUE_FAIL":           160,
	}
)

func (x ERRORCODE) Enum() *ERRORCODE {
	p := new(ERRORCODE)
	*p = x
	return p
}

func (x ERRORCODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERRORCODE) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (ERRORCODE) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x ERRORCODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ERRORCODE.Descriptor instead.
func (ERRORCODE) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

type KeyPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value   string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Version int64  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *KeyPair) Reset() {
	*x = KeyPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPair) ProtoMessage() {}

func (x *KeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPair.ProtoReflect.Descriptor instead.
func (*KeyPair) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (x *KeyPair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyPair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *KeyPair) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	SignData  []byte `protobuf:"bytes,2,opt,name=sign_data,json=signData,proto3" json:"sign_data,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *Signature) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *Signature) GetSignData() []byte {
	if x != nil {
		return x.SignData
	}
	return nil
}

type LedgerUpgrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewLedgerVersion int64    `protobuf:"varint,1,opt,name=new_ledger_version,json=newLedgerVersion,proto3" json:"new_ledger_version,omitempty"` //will be processed as required at verion 2.1.0.0
	NewValidatorList []string `protobuf:"bytes,2,rep,name=new_validator_list,json=newValidatorList,proto3" json:"new_validator_list,omitempty"`  //for hardfork
	ChainCode        string   `protobuf:"bytes,3,opt,name=chain_code,json=chainCode,proto3" json:"chain_code,omitempty"`
}

func (x *LedgerUpgrade) Reset() {
	*x = LedgerUpgrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedgerUpgrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerUpgrade) ProtoMessage() {}

func (x *LedgerUpgrade) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerUpgrade.ProtoReflect.Descriptor instead.
func (*LedgerUpgrade) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *LedgerUpgrade) GetNewLedgerVersion() int64 {
	if x != nil {
		return x.NewLedgerVersion
	}
	return 0
}

func (x *LedgerUpgrade) GetNewValidatorList() []string {
	if x != nil {
		return x.NewValidatorList
	}
	return nil
}

func (x *LedgerUpgrade) GetChainCode() string {
	if x != nil {
		return x.ChainCode
	}
	return ""
}

type WsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     int64  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`       //1: ping
	Request  bool   `protobuf:"varint,2,opt,name=request,proto3" json:"request,omitempty"` //true :request , false:reponse
	Sequence int64  `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Data     []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *WsMessage) Reset() {
	*x = WsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WsMessage) ProtoMessage() {}

func (x *WsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WsMessage.ProtoReflect.Descriptor instead.
func (*WsMessage) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

func (x *WsMessage) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *WsMessage) GetRequest() bool {
	if x != nil {
		return x.Request
	}
	return false
}

func (x *WsMessage) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *WsMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

//for ping messsage
type Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce int64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *Ping) Reset() {
	*x = Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (x *Ping) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

//for pong message
type Pong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce int64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *Pong) Reset() {
	*x = Pong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pong) ProtoMessage() {}

func (x *Pong) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pong.ProtoReflect.Descriptor instead.
func (*Pong) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

func (x *Pong) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x4b, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x8a,
	0x01, 0x0a, 0x0d, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e, 0x65,
	0x77, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x69, 0x0a, 0x09, 0x57,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1c, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x22, 0x1c, 0x0a, 0x04, 0x50, 0x6f, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x2a, 0x94, 0x0a, 0x0a, 0x09, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45,
	0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x01, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x58,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52,
	0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x4e,
	0x49, 0x45, 0x44, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x4d, 0x41, 0x54, 0x48, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x07,
	0x12, 0x27, 0x0a, 0x23, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x52,
	0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x14, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x52, 0x52,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x15, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x55, 0x42, 0x4b, 0x45, 0x59, 0x10, 0x5a, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x50, 0x52, 0x49, 0x4b, 0x45, 0x59, 0x10, 0x5b, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52,
	0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x5c, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x10, 0x5d, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x5e, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10,
	0x61, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4f, 0x4f,
	0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x10, 0x62, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x41,
	0x44, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x63, 0x12, 0x1f, 0x0a, 0x1b,
	0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x4c, 0x4f, 0x57, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x10, 0x64, 0x12, 0x24, 0x0a,
	0x20, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x44, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41,
	0x4c, 0x10, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x10, 0x66, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x10, 0x67, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x4f, 0x57, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x10, 0x68, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x52, 0x52,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x41, 0x53, 0x53,
	0x45, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x41,
	0x52, 0x47, 0x45, 0x10, 0x69, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x4c, 0x4f,
	0x57, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x10, 0x6a, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45,
	0x4e, 0x4f, 0x55, 0x47, 0x48, 0x10, 0x6f, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x70,
	0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x5f,
	0x4f, 0x46, 0x5f, 0x54, 0x58, 0x43, 0x41, 0x43, 0x48, 0x45, 0x10, 0x72, 0x12, 0x1c, 0x0a, 0x18,
	0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x78, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x52,
	0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x79, 0x12, 0x20, 0x0a, 0x1b, 0x45,
	0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x90, 0x01, 0x12, 0x1c, 0x0a,
	0x17, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x58, 0x5f, 0x53, 0x49, 0x5a, 0x45,
	0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x42, 0x49, 0x47, 0x10, 0x92, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x45,
	0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f,
	0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x97, 0x01, 0x12,
	0x22, 0x0a, 0x1d, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x41, 0x43, 0x54, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x98, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59,
	0x5f, 0x52, 0x45, 0x43, 0x55, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x99, 0x01, 0x12, 0x2b, 0x0a,
	0x26, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43,
	0x54, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x9a, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x45, 0x52,
	0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x9b,
	0x01, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x9c, 0x01,
	0x12, 0x24, 0x0a, 0x1f, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x9d, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x45, 0x52, 0x52, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x54, 0x58, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x55,
	0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0xa0, 0x01, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_common_proto_goTypes = []interface{}{
	(ERRORCODE)(0),        // 0: protocol.ERRORCODE
	(*KeyPair)(nil),       // 1: protocol.KeyPair
	(*Signature)(nil),     // 2: protocol.Signature
	(*LedgerUpgrade)(nil), // 3: protocol.LedgerUpgrade
	(*WsMessage)(nil),     // 4: protocol.WsMessage
	(*Ping)(nil),          // 5: protocol.Ping
	(*Pong)(nil),          // 6: protocol.Pong
}
var file_common_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedgerUpgrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
